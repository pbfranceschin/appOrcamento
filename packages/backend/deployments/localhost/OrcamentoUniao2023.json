{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "added",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "Registry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "AREAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EDUCACAO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INFRA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OUTROS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SAUDE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "org",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        }
      ],
      "name": "addArea",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "org",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "addOrg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "org",
          "type": "address"
        }
      ],
      "name": "getAreas",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitialBudget",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "org",
          "type": "address"
        }
      ],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBurned",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalMinted",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "areas",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "org",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        }
      ],
      "name": "subArea",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "org",
          "type": "address"
        }
      ],
      "name": "subOrg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb5e6366d792d16ef5eb79837e5c0c195b00fdb7985285d8d4049cc9068bf3e6c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "4973617",
    "logsBloom": "0x
    "blockHash": "0x734239956f2fe57fb8d89d9ac995244ffd480f5892d47117bd71435ee81829b2",
    "transactionHash": "0xa1a7544322f70cf0fb168b811ec56968d734473f490157c7a5a230bb353c69c9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xb5e6366d792d16ef5eb79837e5c0c195b00fdb7985285d8d4049cc9068bf3e6c",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x734239956f2fe57fb8d89d9ac995244ffd480f5892d47117bd71435ee81829b2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xb5e6366d792d16ef5eb79837e5c0c195b00fdb7985285d8d4049cc9068bf3e6c",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000ba43b7400",
        "logIndex": 1,
        "blockHash": "0x734239956f2fe57fb8d89d9ac995244ffd480f5892d47117bd71435ee81829b2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xb5e6366d792d16ef5eb79837e5c0c195b00fdb7985285d8d4049cc9068bf3e6c",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000ba43b7400",
        "logIndex": 2,
        "blockHash": "0x734239956f2fe57fb8d89d9ac995244ffd480f5892d47117bd71435ee81829b2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xb5e6366d792d16ef5eb79837e5c0c195b00fdb7985285d8d4049cc9068bf3e6c",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000174876e800",
        "logIndex": 3,
        "blockHash": "0x734239956f2fe57fb8d89d9ac995244ffd480f5892d47117bd71435ee81829b2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xb5e6366d792d16ef5eb79837e5c0c195b00fdb7985285d8d4049cc9068bf3e6c",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ba43b74000",
        "logIndex": 4,
        "blockHash": "0x734239956f2fe57fb8d89d9ac995244ffd480f5892d47117bd71435ee81829b2"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "5063294",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "874de76f65cc898214f1439f349c97be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"Registry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AREAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EDUCACAO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INFRA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OUTROS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAUDE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"org\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"}],\"name\":\"addArea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"org\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addOrg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"org\",\"type\":\"address\"}],\"name\":\"getAreas\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialBudget\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"org\",\"type\":\"address\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBurned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMinted\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"areas\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"org\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"}],\"name\":\"subArea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"org\",\"type\":\"address\"}],\"name\":\"subOrg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"_orgAddress\":{\"details\":\"mapping name to address of org\"},\"_orgArea\":{\"details\":\"maps address to policy area to bool\"},\"_orgName\":{\"details\":\"mapping address to name of org\"},\"_totalBurned\":{\"details\":\"maps policy area to total burned\"},\"_totalMinted\":{\"details\":\"maps policy area to total minted\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/orcamento.sol\":\"OrcamentoUniao2023\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/orcamento.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract OrcamentoUniao2023 is ERC1155, Ownable {\\r\\n    \\r\\n    /**\\r\\n     * @dev maps address to policy area to bool\\r\\n     * @notice this format is used because an organization can be active in multiple policy area\\r\\n     */\\r\\n    mapping(address => mapping(uint256 => bool)) private _orgArea;\\r\\n\\r\\n    /**\\r\\n     * @dev mapping address to name of org\\r\\n     */\\r\\n    mapping(address => string) _orgName;\\r\\n\\r\\n    /**\\r\\n     * @dev mapping name to address of org\\r\\n     */\\r\\n    mapping(string => address) _orgAddress;\\r\\n \\r\\n    /**\\r\\n     * @dev maps policy area to total minted\\r\\n     */\\r\\n    mapping (uint256 => uint256) private _totalMinted;\\r\\n\\r\\n    /**\\r\\n     * @dev maps policy area to total burned\\r\\n     */\\r\\n    mapping (uint256 => uint256) private _totalBurned;\\r\\n\\r\\n    //\\r\\n    uint256 public OUTROS = 0;\\r\\n    uint256 public EDUCACAO = 1;\\r\\n    uint256 public INFRA = 2;\\r\\n    uint256 public SAUDE = 3;\\r\\n    // \\r\\n    uint256[] public AREAS = [OUTROS, EDUCACAO, INFRA, SAUDE ];\\r\\n\\r\\n    // verba e percentuais da verba destinados a cada area\\r\\n    // PASSAR PELO CONSTRUCTOR\\r\\n    uint256 private _budget = 10**12;\\r\\n    uint256 private _ed = 5;\\r\\n    uint256 private _infra = 10; \\r\\n    uint256 private _health = 5;\\r\\n    uint256 private _other = 100 - _health - _ed - _infra;\\r\\n\\r\\n    uint256[] private _budgetPart = [_other, _ed, _infra, _health];\\r\\n\\r\\n    event Registry(address indexed account, uint256 indexed area, bool indexed added, string name);\\r\\n\\r\\n    constructor() ERC1155(\\\"https://console.filebase.com/buckets/app-orcamento/{area}.json\\\") {\\r\\n        \\r\\n        _mint(msg.sender, SAUDE, (_budget * _health) / 100, \\\"\\\");\\r\\n        _mint(msg.sender, EDUCACAO, (_budget * _ed) / 100, \\\"\\\");\\r\\n        _mint(msg.sender, INFRA, (_budget * _infra) / 100, \\\"\\\");\\r\\n        _mint(msg.sender, OUTROS, (_budget * _other) / 100, \\\"\\\");\\r\\n        _totalMinted[SAUDE] = (_budget * _health) / 100;\\r\\n        _totalMinted[EDUCACAO] = (_budget * _ed) / 100;\\r\\n        _totalMinted[INFRA] = (_budget * _infra) / 100;\\r\\n        _totalMinted[OUTROS] = (_budget * _other) / 100;\\r\\n        _orgName[msg.sender] = \\\"Tesouro Nacional\\\";\\r\\n        _orgAddress[\\\"Tesouro Nacional\\\"] = msg.sender;\\r\\n        for(uint256 i=0; i<AREAS.length; i++){\\r\\n            _setArea(msg.sender, i);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function getInitialBudget() public view returns(uint256[] memory){\\r\\n        uint256[] memory budget = new uint256[](AREAS.length + 1);\\r\\n        uint256 j=0;\\r\\n        for(uint256 i=0; i<_budgetPart.length; i++){\\r\\n            budget[i] = _budgetPart[i];\\r\\n            j++;\\r\\n        }\\r\\n        \\r\\n        budget[j] = _budget;\\r\\n        \\r\\n        return budget;\\r\\n    }\\r\\n\\r\\n    function getTotalMinted() public view returns(uint256[] memory) {\\r\\n        uint256[] memory minted = new uint256[](AREAS.length);\\r\\n\\r\\n        for(uint256 i=0; i<AREAS.length; i++){\\r\\n            minted[i] = _totalMinted[i];\\r\\n        }\\r\\n\\r\\n        return minted;\\r\\n    }\\r\\n\\r\\n    function getTotalBurned() public view returns(uint256[] memory) {\\r\\n        uint256[] memory burned = new uint256[](AREAS.length);\\r\\n\\r\\n        for(uint256 i=0; i<AREAS.length; i++){\\r\\n            burned[i] = _totalBurned[i];\\r\\n        }\\r\\n\\r\\n        return burned;\\r\\n    }\\r\\n\\r\\n\\r\\n    // TODO function override que verifica se address ta cadastrado antes de chamar balanceOf\\r\\n\\r\\n    function getAreas(address org) public view returns(uint256[] memory){\\r\\n        require(_orgArea[org][OUTROS] == true, \\\"organization not added\\\");\\r\\n        \\r\\n        uint[] memory areas = new uint[](AREAS.length);\\r\\n        uint j = 1;\\r\\n        for(uint256 i = 1; i < AREAS.length; i++){\\r\\n            if(_orgArea[org][i] == true){\\r\\n                areas[j] = i;\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n        return areas;\\r\\n    }\\r\\n\\r\\n    function getName(address org) public view returns(string memory){\\r\\n        return _orgName[org];\\r\\n    }\\r\\n    \\r\\n    function getAddress(string memory name) public view returns(address) {\\r\\n        return _orgAddress[name];\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 area,\\r\\n        uint256 amount\\r\\n    ) public onlyOwner {\\r\\n        require(_orgArea[to][OUTROS] == true, \\\"organization not added\\\");\\r\\n\\r\\n        _totalMinted[area] += amount;\\r\\n        _mint(to, area, amount, '0x00');\\r\\n    }\\r\\n\\r\\n    function burn(\\r\\n        address from,\\r\\n        uint256 area,\\r\\n        uint256 amount\\r\\n    ) public onlyOwner {\\r\\n        require(_orgArea[from][OUTROS] == true, \\\"organization not added\\\");\\r\\n\\r\\n        _totalBurned[area] += amount;\\r\\n        _burn(from, area, amount);\\r\\n\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from, \\r\\n        address to, \\r\\n        uint256 area, \\r\\n        uint256 amount, \\r\\n        bytes memory data\\r\\n    ) public override {\\r\\n        require(\\r\\n            _orgArea[to][area] == true, \\\"this organization does not have permission to receive this budget\\\"\\r\\n        );\\r\\n        super.safeTransferFrom(from, to, area, amount, data);\\r\\n    }\\r\\n    \\r\\n    function safeBatchTransferFrom(\\r\\n        address from, \\r\\n        address to, \\r\\n        uint256[] memory areas, \\r\\n        uint256[] memory amounts, \\r\\n        bytes memory data\\r\\n    ) public override {\\r\\n        for(uint256 i = 0; i < areas.length; i++){\\r\\n            require(\\r\\n                _orgArea[to][areas[i]] == true, \\\"this organization does not have permission to receive part of the batch\\\"\\r\\n            );\\r\\n        }\\r\\n        super.safeBatchTransferFrom(from, to, areas, amounts, data);\\r\\n    }\\r\\n    \\r\\n\\r\\n    function addOrg(address org, uint256 area, string memory name) public onlyOwner {\\r\\n        require(_orgArea[org][OUTROS] != true, \\\"address already added\\\");\\r\\n\\r\\n        _orgName[org] = name;\\r\\n        _orgAddress[name] = org;\\r\\n        _setArea(org, OUTROS);\\r\\n\\r\\n\\r\\n        // emit Registry(org, OUTROS, true, name);\\r\\n\\r\\n        if(area != OUTROS){\\r\\n            // emit Registry(org, area, true, name);\\r\\n            _setArea(org, area);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function subOrg(address org) public onlyOwner {\\r\\n        require(_orgArea[org][OUTROS] == true, \\\"address not added\\\");\\r\\n\\r\\n        uint[] memory areas = getAreas(org);\\r\\n        for(uint256 i = 0; i < areas.length; i++){\\r\\n            if(_orgArea[org][areas[i]] == false){\\r\\n                return;\\r\\n            }\\r\\n            // emit Registry(org, areas[i], false, _orgName[org]);\\r\\n            _subArea(org, areas[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function subArea(address org, uint256 area) public onlyOwner {\\r\\n        require(area > 0, 'to exclude account altogether use subOrg method');\\r\\n        require(_orgArea[org][area] == true, 'this account is not registered to the area specified');\\r\\n        \\r\\n        // emit Registry(org, area, false, _orgName[org]);\\r\\n        _subArea(org, area);\\r\\n    }\\r\\n\\r\\n    function addArea(address org, uint256 area) public onlyOwner{\\r\\n        require(_orgArea[org][OUTROS] == true, 'Please add organization first');\\r\\n        require(_orgArea[org][area] != true, \\\"area already set for this organization\\\");\\r\\n\\r\\n        // emit Registry(org, area, true, _orgName[org]);\\r\\n        _setArea(org, area);\\r\\n    }\\r\\n\\r\\n    function _setArea(address org, uint256 area) private {\\r\\n        emit Registry(org, area, true, _orgName[org]);\\r\\n        _orgArea[org][area] = true;\\r\\n    }\\r\\n\\r\\n    function _subArea(address org, uint256 area) private {\\r\\n        emit Registry(org, area, false, _orgName[org]);\\r\\n        _orgArea[org][area] = false;\\r\\n    }\\r\\n\\r\\n \\r\\n    ////////////////////////////\\r\\n    // teste //////////////\\r\\n    \\r\\n    // event testeEvento(uint256 input, address caller);\\r\\n    // uint256 private umValor;\\r\\n\\r\\n    // function teste(uint256 trossoqualquer) public {\\r\\n    //     require(trossoqualquer == 0, \\\"trossoqualquer nao eh zero\\\");\\r\\n    //     umValor = trossoqualquer;\\r\\n    //     emit testeEvento(umValor, msg.sender);\\r\\n    // }\\r\\n    \\r\\n}\",\"keccak256\":\"0x1f0155c8183c8b097fe7b304f89ead26993d804c1cb2dcd16c68a56b552d5c69\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405260006009556001600a556002600b556003600c5560405180608001604052806009548152602001600a548152602001600b548152602001600c54815250600d9060046200005392919062000ad0565b5064e8d4a51000600e556005600f55600a6010556005601155601054600f54601154606462000083919062000c0b565b6200008f919062000c0b565b6200009b919062000c0b565b60125560405180608001604052806012548152602001600f54815260200160105481526020016011548152506013906004620000d992919062000ad0565b50348015620000e757600080fd5b506040518060600160405280603e815260200162005fef603e913962000113816200045060201b60201c565b5062000134620001286200046c60201b60201c565b6200047460201b60201c565b6200017833600c546064601154600e5462000150919062000c46565b6200015c919062000cd6565b604051806020016040528060008152506200053a60201b60201c565b620001bc33600a546064600f54600e5462000194919062000c46565b620001a0919062000cd6565b604051806020016040528060008152506200053a60201b60201c565b6200020033600b546064601054600e54620001d8919062000c46565b620001e4919062000cd6565b604051806020016040528060008152506200053a60201b60201c565b62000244336009546064601254600e546200021c919062000c46565b62000228919062000cd6565b604051806020016040528060008152506200053a60201b60201c565b6064601154600e5462000258919062000c46565b62000264919062000cd6565b60076000600c548152602001908152602001600020819055506064600f54600e5462000291919062000c46565b6200029d919062000cd6565b60076000600a548152602001908152602001600020819055506064601054600e54620002ca919062000c46565b620002d6919062000cd6565b60076000600b548152602001908152602001600020819055506064601254600e5462000303919062000c46565b6200030f919062000cd6565b600760006009548152602001908152602001600020819055506040518060400160405280601081526020017f5465736f75726f204e6163696f6e616c00000000000000000000000000000000815250600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190620003b292919062000b22565b50336006604051620003c49062000d69565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005b600d8054905081101562000449576200043333826200072260201b60201c565b8080620004409062000d80565b91505062000413565b506200152f565b80600290805190602001906200046892919062000b22565b5050565b600033905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415620005ad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005a49062000e55565b60405180910390fd5b6000620005bf6200046c60201b60201c565b90506000620005d4856200082260201b60201c565b90506000620005e9856200082260201b60201c565b90506200060283600089858589620008a360201b60201c565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825462000663919062000e77565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051620006e392919062000ee5565b60405180910390a46200070283600089858589620008ab60201b60201c565b6200071983600089898989620008b360201b60201c565b50505050505050565b60011515818373ffffffffffffffffffffffffffffffffffffffff167fb8ab71d168de2395481e4653bcaf8113b8d414ee4f783094c4a67ec50b060f28600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051620007ad919062001018565b60405180910390a46001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60606000600167ffffffffffffffff8111156200084457620008436200103c565b5b604051908082528060200260200182016040528015620008735781602001602082028036833780820191505090505b50905082816000815181106200088e576200088d6200106b565b5b60200260200101818152505080915050919050565b505050505050565b505050505050565b620008df8473ffffffffffffffffffffffffffffffffffffffff1662000aad60201b620018ef1760201c565b1562000aa5578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016200092895949392919062001183565b6020604051808303816000875af19250505080156200096757506040513d601f19601f8201168201806040525081019062000964919062001253565b60015b62000a19576200097662001292565b806308c379a01415620009da57506200098e620012ed565b806200099b5750620009dc565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009d19190620013db565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a109062001475565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161462000aa3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a9a906200150d565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805482825590600052602060002090810192821562000b0f579160200282015b8281111562000b0e57825182559160200191906001019062000af1565b5b50905062000b1e919062000bb3565b5090565b82805462000b309062000f41565b90600052602060002090601f01602090048101928262000b54576000855562000ba0565b82601f1062000b6f57805160ff191683800117855562000ba0565b8280016001018555821562000ba0579182015b8281111562000b9f57825182559160200191906001019062000b82565b5b50905062000baf919062000bb3565b5090565b5b8082111562000bce57600081600090555060010162000bb4565b5090565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000c188262000bd2565b915062000c258362000bd2565b92508282101562000c3b5762000c3a62000bdc565b5b828203905092915050565b600062000c538262000bd2565b915062000c608362000bd2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562000c9c5762000c9b62000bdc565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000ce38262000bd2565b915062000cf08362000bd2565b92508262000d035762000d0262000ca7565b5b828204905092915050565b600081905092915050565b7f5465736f75726f204e6163696f6e616c00000000000000000000000000000000600082015250565b600062000d5160108362000d0e565b915062000d5e8262000d19565b601082019050919050565b600062000d768262000d42565b9150819050919050565b600062000d8d8262000bd2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000dc35762000dc262000bdc565b5b600182019050919050565b600082825260208201905092915050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600062000e3d60218362000dce565b915062000e4a8262000ddf565b604082019050919050565b6000602082019050818103600083015262000e708162000e2e565b9050919050565b600062000e848262000bd2565b915062000e918362000bd2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000ec95762000ec862000bdc565b5b828201905092915050565b62000edf8162000bd2565b82525050565b600060408201905062000efc600083018562000ed4565b62000f0b602083018462000ed4565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000f5a57607f821691505b6020821081141562000f715762000f7062000f12565b5b50919050565b60008190508160005260206000209050919050565b6000815462000f9b8162000f41565b62000fa7818662000dce565b9450600182166000811462000fc5576001811462000fd8576200100f565b60ff19831686526020860193506200100f565b62000fe38562000f77565b60005b83811015620010075781548189015260018201915060208101905062000fe6565b808801955050505b50505092915050565b6000602082019050818103600083015262001034818462000f8c565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620010c7826200109a565b9050919050565b620010d981620010ba565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200111b578082015181840152602081019050620010fe565b838111156200112b576000848401525b50505050565b6000601f19601f8301169050919050565b60006200114f82620010df565b6200115b8185620010ea565b93506200116d818560208601620010fb565b620011788162001131565b840191505092915050565b600060a0820190506200119a6000830188620010ce565b620011a96020830187620010ce565b620011b8604083018662000ed4565b620011c7606083018562000ed4565b8181036080830152620011db818462001142565b90509695505050505050565b6000604051905090565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6200122d81620011f6565b81146200123957600080fd5b50565b6000815190506200124d8162001222565b92915050565b6000602082840312156200126c576200126b620011f1565b5b60006200127c848285016200123c565b91505092915050565b60008160e01c9050919050565b600060033d1115620012b45760046000803e620012b160005162001285565b90505b90565b620012c28262001131565b810181811067ffffffffffffffff82111715620012e457620012e36200103c565b5b80604052505050565b600060443d1015620012ff576200138c565b62001309620011e7565b60043d036004823e80513d602482011167ffffffffffffffff82111715620013335750506200138c565b808201805167ffffffffffffffff8111156200135357505050506200138c565b80602083010160043d038501811115620013725750505050506200138c565b6200138382602001850186620012b7565b82955050505050505b90565b600081519050919050565b6000620013a7826200138f565b620013b3818562000dce565b9350620013c5818560208601620010fb565b620013d08162001131565b840191505092915050565b60006020820190508181036000830152620013f781846200139a565b905092915050565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006200145d60348362000dce565b91506200146a82620013ff565b604082019050919050565b6000602082019050818103600083015262001490816200144e565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000620014f560288362000dce565b9150620015028262001497565b604082019050919050565b600060208201905081810360008301526200152881620014e6565b9050919050565b614ab0806200153f6000396000f3fe608060405234801561001057600080fd5b50600436106101c35760003560e01c8063715018a6116100f9578063cdda771511610097578063f242432a11610071578063f242432a14610518578063f2fde38b14610534578063f5298aca14610550578063f84f7dd01461056c576101c3565b8063cdda7715146104ac578063db401541146104ca578063e985e9c5146104e8576101c3565b80638da5cb5b116100d35780638da5cb5b14610424578063a22cb46514610442578063b55cd04b1461045e578063bf40fac11461047c576101c3565b8063715018a6146103ce5780637f14ba3f146103d85780637f7063e7146103f4576101c3565b80631ef16b43116101665780632eb2c2d6116101405780632eb2c2d6146103365780634e1273f4146103525780635fd4b08a1461038257806361ae0309146103b2576101c3565b80631ef16b43146102ca57806321636aa5146102e857806328eece1314610306576101c3565b80630ca1c5c9116101a25780630ca1c5c9146102445780630e89341c14610262578063156e29f614610292578063169bc486146102ae576101c3565b8062fdd58e146101c857806301ffc9a7146101f85780630c89c42114610228575b600080fd5b6101e260048036038101906101dd9190612eae565b61058a565b6040516101ef9190612efd565b60405180910390f35b610212600480360381019061020d9190612f70565b610653565b60405161021f9190612fb8565b60405180910390f35b610242600480360381019061023d9190612fd3565b610735565b005b61024c6108c4565b60405161025991906130be565b60405180910390f35b61027c600480360381019061027791906130e0565b610976565b60405161028991906131a6565b60405180910390f35b6102ac60048036038101906102a791906131c8565b610a0a565b005b6102c860048036038101906102c39190612eae565b610b28565b005b6102d2610c89565b6040516102df9190612efd565b60405180910390f35b6102f0610c8f565b6040516102fd9190612efd565b60405180910390f35b610320600480360381019061031b9190612fd3565b610c95565b60405161032d91906130be565b60405180910390f35b610350600480360381019061034b9190613418565b610e60565b005b61036c600480360381019061036791906135aa565b610f52565b60405161037991906130be565b60405180910390f35b61039c60048036038101906103979190612fd3565b61106b565b6040516103a991906131a6565b60405180910390f35b6103cc60048036038101906103c791906136c3565b61113c565b005b6103d66112c1565b005b6103f260048036038101906103ed9190612eae565b6112d5565b005b61040e600480360381019061040991906130e0565b6113d2565b60405161041b9190612efd565b60405180910390f35b61042c6113f6565b6040516104399190613741565b60405180910390f35b61045c60048036038101906104579190613788565b611420565b005b610466611436565b60405161047391906130be565b60405180910390f35b610496600480360381019061049191906137c8565b6114e8565b6040516104a39190613741565b60405180910390f35b6104b4611530565b6040516104c191906130be565b60405180910390f35b6104d261162b565b6040516104df9190612efd565b60405180910390f35b61050260048036038101906104fd9190613811565b611631565b60405161050f9190612fb8565b60405180910390f35b610532600480360381019061052d9190613851565b6116c5565b005b61054e60048036038101906105499190612fd3565b61177d565b005b61056a600480360381019061056591906131c8565b611801565b005b6105746118e9565b6040516105819190612efd565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f29061395a565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061071e57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061072e575061072d82611912565b5b9050919050565b61073d61197c565b60011515600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600954815260200190815260200160002060009054906101000a900460ff161515146107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da906139c6565b60405180910390fd5b60006107ee82610c95565b905060005b81518110156108be5760001515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848481518110610854576108536139e6565b5b6020026020010151815260200190815260200160002060009054906101000a900460ff16151514156108875750506108c1565b6108ab8383838151811061089e5761089d6139e6565b5b60200260200101516119fa565b80806108b690613a44565b9150506107f3565b50505b50565b60606000600d8054905067ffffffffffffffff8111156108e7576108e6613220565b5b6040519080825280602002602001820160405280156109155781602001602082028036833780820191505090505b50905060005b600d8054905081101561096e57600760008281526020019081526020016000205482828151811061094f5761094e6139e6565b5b602002602001018181525050808061096690613a44565b91505061091b565b508091505090565b60606002805461098590613abc565b80601f01602080910402602001604051908101604052809291908181526020018280546109b190613abc565b80156109fe5780601f106109d3576101008083540402835291602001916109fe565b820191906000526020600020905b8154815290600101906020018083116109e157829003601f168201915b50505050509050919050565b610a1261197c565b60011515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600954815260200190815260200160002060009054906101000a900460ff16151514610ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaf90613b3a565b60405180910390fd5b80600760008481526020019081526020016000206000828254610adb9190613b5a565b92505081905550610b238383836040518060400160405280600481526020017f3078303000000000000000000000000000000000000000000000000000000000815250611af8565b505050565b610b3061197c565b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600954815260200190815260200160002060009054906101000a900460ff16151514610bd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcd90613bfc565b60405180910390fd5b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151415610c7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7290613c8e565b60405180910390fd5b610c858282611ca9565b5050565b600b5481565b60095481565b606060011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600954815260200190815260200160002060009054906101000a900460ff16151514610d3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3490613b3a565b60405180910390fd5b6000600d8054905067ffffffffffffffff811115610d5e57610d5d613220565b5b604051908082528060200260200182016040528015610d8c5781602001602082028036833780820191505090505b5090506000600190506000600190505b600d80549050811015610e555760011515600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151415610e425780838381518110610e2757610e266139e6565b5b6020026020010181815250508180610e3e90613a44565b9250505b8080610e4d90613a44565b915050610d9c565b508192505050919050565b60005b8351811015610f3d5760011515600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868481518110610ec457610ec36139e6565b5b6020026020010151815260200190815260200160002060009054906101000a900460ff16151514610f2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2190613d46565b60405180910390fd5b8080610f3590613a44565b915050610e63565b50610f4b8585858585611da7565b5050505050565b60608151835114610f98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8f90613dd8565b60405180910390fd5b6000835167ffffffffffffffff811115610fb557610fb4613220565b5b604051908082528060200260200182016040528015610fe35781602001602082028036833780820191505090505b50905060005b845181101561106057611030858281518110611008576110076139e6565b5b6020026020010151858381518110611023576110226139e6565b5b602002602001015161058a565b828281518110611043576110426139e6565b5b6020026020010181815250508061105990613a44565b9050610fe9565b508091505092915050565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546110b790613abc565b80601f01602080910402602001604051908101604052809291908181526020018280546110e390613abc565b80156111305780601f1061110557610100808354040283529160200191611130565b820191906000526020600020905b81548152906001019060200180831161111357829003601f168201915b50505050509050919050565b61114461197c565b60011515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600954815260200190815260200160002060009054906101000a900460ff16151514156111eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e290613e44565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908051906020019061123e929190612d63565b50826006826040516112509190613ea0565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112a883600954611ca9565b60095482146112bc576112bb8383611ca9565b5b505050565b6112c961197c565b6112d36000611e48565b565b6112dd61197c565b60008111611320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131790613f29565b60405180910390fd5b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff161515146113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb90613fbb565b60405180910390fd5b6113ce82826119fa565b5050565b600d81815481106113e257600080fd5b906000526020600020016000915090505481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61143261142b611f0e565b8383611f16565b5050565b60606000600d8054905067ffffffffffffffff81111561145957611458613220565b5b6040519080825280602002602001820160405280156114875781602001602082028036833780820191505090505b50905060005b600d805490508110156114e05760086000828152602001908152602001600020548282815181106114c1576114c06139e6565b5b60200260200101818152505080806114d890613a44565b91505061148d565b508091505090565b60006006826040516114fa9190613ea0565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b606060006001600d805490506115469190613b5a565b67ffffffffffffffff81111561155f5761155e613220565b5b60405190808252806020026020018201604052801561158d5781602001602082028036833780820191505090505b5090506000805b60138054905081101561160057601381815481106115b5576115b46139e6565b5b90600052602060002001548382815181106115d3576115d26139e6565b5b60200260200101818152505081806115ea90613a44565b92505080806115f890613a44565b915050611594565b50600e54828281518110611617576116166139e6565b5b602002602001018181525050819250505090565b600a5481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60011515600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff16151514611769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176090614073565b60405180910390fd5b6117768585858585612083565b5050505050565b61178561197c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ec90614105565b60405180910390fd5b6117fe81611e48565b50565b61180961197c565b60011515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600954815260200190815260200160002060009054906101000a900460ff161515146118af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a690613b3a565b60405180910390fd5b806008600084815260200190815260200160002060008282546118d29190613b5a565b925050819055506118e4838383612124565b505050565b600c5481565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611984611f0e565b73ffffffffffffffffffffffffffffffffffffffff166119a26113f6565b73ffffffffffffffffffffffffffffffffffffffff16146119f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ef90614171565b60405180910390fd5b565b60001515818373ffffffffffffffffffffffffffffffffffffffff167fb8ab71d168de2395481e4653bcaf8113b8d414ee4f783094c4a67ec50b060f28600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051611a839190614226565b60405180910390a46000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611b68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5f906142ba565b60405180910390fd5b6000611b72611f0e565b90506000611b7f8561236b565b90506000611b8c8561236b565b9050611b9d836000898585896123e5565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bfc9190613b5a565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611c7a9291906142da565b60405180910390a4611c91836000898585896123ed565b611ca0836000898989896123f5565b50505050505050565b60011515818373ffffffffffffffffffffffffffffffffffffffff167fb8ab71d168de2395481e4653bcaf8113b8d414ee4f783094c4a67ec50b060f28600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051611d329190614226565b60405180910390a46001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b611daf611f0e565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611df55750611df485611def611f0e565b611631565b5b611e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2b90614375565b60405180910390fd5b611e4185858585856125cd565b5050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7c90614407565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516120769190612fb8565b60405180910390a3505050565b61208b611f0e565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806120d157506120d0856120cb611f0e565b611631565b5b612110576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210790614375565b60405180910390fd5b61211d85858585856128ef565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612194576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218b90614499565b60405180910390fd5b600061219e611f0e565b905060006121ab8461236b565b905060006121b88461236b565b90506121d8838760008585604051806020016040528060008152506123e5565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508481101561226f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122669061452b565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161233c9291906142da565b60405180910390a4612362848860008686604051806020016040528060008152506123ed565b50505050505050565b60606000600167ffffffffffffffff81111561238a57612389613220565b5b6040519080825280602002602001820160405280156123b85781602001602082028036833780820191505090505b50905082816000815181106123d0576123cf6139e6565b5b60200260200101818152505080915050919050565b505050505050565b505050505050565b6124148473ffffffffffffffffffffffffffffffffffffffff166118ef565b156125c5578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b815260040161245a9594939291906145a0565b6020604051808303816000875af192505050801561249657506040513d601f19601f82011682018060405250810190612493919061460f565b60015b61253c576124a2614649565b806308c379a014156124ff57506124b761466b565b806124c25750612501565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124f691906131a6565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253390614773565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146125c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ba90614805565b60405180910390fd5b505b505050505050565b8151835114612611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260890614897565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161267890614929565b60405180910390fd5b600061268b611f0e565b905061269b8187878787876123e5565b60005b845181101561284c5760008582815181106126bc576126bb6139e6565b5b6020026020010151905060008583815181106126db576126da6139e6565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561277c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612773906149bb565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128319190613b5a565b925050819055505050508061284590613a44565b905061269e565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516128c39291906149db565b60405180910390a46128d98187878787876123ed565b6128e7818787878787612b8b565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561295f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295690614929565b60405180910390fd5b6000612969611f0e565b905060006129768561236b565b905060006129838561236b565b90506129938389898585896123e5565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015612a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a21906149bb565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612adf9190613b5a565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051612b5c9291906142da565b60405180910390a4612b72848a8a86868a6123ed565b612b80848a8a8a8a8a6123f5565b505050505050505050565b612baa8473ffffffffffffffffffffffffffffffffffffffff166118ef565b15612d5b578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612bf0959493929190614a12565b6020604051808303816000875af1925050508015612c2c57506040513d601f19601f82011682018060405250810190612c29919061460f565b60015b612cd257612c38614649565b806308c379a01415612c955750612c4d61466b565b80612c585750612c97565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c8c91906131a6565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cc990614773565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612d59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5090614805565b60405180910390fd5b505b505050505050565b828054612d6f90613abc565b90600052602060002090601f016020900481019282612d915760008555612dd8565b82601f10612daa57805160ff1916838001178555612dd8565b82800160010185558215612dd8579182015b82811115612dd7578251825591602001919060010190612dbc565b5b509050612de59190612de9565b5090565b5b80821115612e02576000816000905550600101612dea565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612e4582612e1a565b9050919050565b612e5581612e3a565b8114612e6057600080fd5b50565b600081359050612e7281612e4c565b92915050565b6000819050919050565b612e8b81612e78565b8114612e9657600080fd5b50565b600081359050612ea881612e82565b92915050565b60008060408385031215612ec557612ec4612e10565b5b6000612ed385828601612e63565b9250506020612ee485828601612e99565b9150509250929050565b612ef781612e78565b82525050565b6000602082019050612f126000830184612eee565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612f4d81612f18565b8114612f5857600080fd5b50565b600081359050612f6a81612f44565b92915050565b600060208284031215612f8657612f85612e10565b5b6000612f9484828501612f5b565b91505092915050565b60008115159050919050565b612fb281612f9d565b82525050565b6000602082019050612fcd6000830184612fa9565b92915050565b600060208284031215612fe957612fe8612e10565b5b6000612ff784828501612e63565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61303581612e78565b82525050565b6000613047838361302c565b60208301905092915050565b6000602082019050919050565b600061306b82613000565b613075818561300b565b93506130808361301c565b8060005b838110156130b1578151613098888261303b565b97506130a383613053565b925050600181019050613084565b5085935050505092915050565b600060208201905081810360008301526130d88184613060565b905092915050565b6000602082840312156130f6576130f5612e10565b5b600061310484828501612e99565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561314757808201518184015260208101905061312c565b83811115613156576000848401525b50505050565b6000601f19601f8301169050919050565b60006131788261310d565b6131828185613118565b9350613192818560208601613129565b61319b8161315c565b840191505092915050565b600060208201905081810360008301526131c0818461316d565b905092915050565b6000806000606084860312156131e1576131e0612e10565b5b60006131ef86828701612e63565b935050602061320086828701612e99565b925050604061321186828701612e99565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132588261315c565b810181811067ffffffffffffffff8211171561327757613276613220565b5b80604052505050565b600061328a612e06565b9050613296828261324f565b919050565b600067ffffffffffffffff8211156132b6576132b5613220565b5b602082029050602081019050919050565b600080fd5b60006132df6132da8461329b565b613280565b90508083825260208201905060208402830185811115613302576133016132c7565b5b835b8181101561332b57806133178882612e99565b845260208401935050602081019050613304565b5050509392505050565b600082601f83011261334a5761334961321b565b5b813561335a8482602086016132cc565b91505092915050565b600080fd5b600067ffffffffffffffff82111561338357613382613220565b5b61338c8261315c565b9050602081019050919050565b82818337600083830152505050565b60006133bb6133b684613368565b613280565b9050828152602081018484840111156133d7576133d6613363565b5b6133e2848285613399565b509392505050565b600082601f8301126133ff576133fe61321b565b5b813561340f8482602086016133a8565b91505092915050565b600080600080600060a0868803121561343457613433612e10565b5b600061344288828901612e63565b955050602061345388828901612e63565b945050604086013567ffffffffffffffff81111561347457613473612e15565b5b61348088828901613335565b935050606086013567ffffffffffffffff8111156134a1576134a0612e15565b5b6134ad88828901613335565b925050608086013567ffffffffffffffff8111156134ce576134cd612e15565b5b6134da888289016133ea565b9150509295509295909350565b600067ffffffffffffffff82111561350257613501613220565b5b602082029050602081019050919050565b6000613526613521846134e7565b613280565b90508083825260208201905060208402830185811115613549576135486132c7565b5b835b81811015613572578061355e8882612e63565b84526020840193505060208101905061354b565b5050509392505050565b600082601f8301126135915761359061321b565b5b81356135a1848260208601613513565b91505092915050565b600080604083850312156135c1576135c0612e10565b5b600083013567ffffffffffffffff8111156135df576135de612e15565b5b6135eb8582860161357c565b925050602083013567ffffffffffffffff81111561360c5761360b612e15565b5b61361885828601613335565b9150509250929050565b600067ffffffffffffffff82111561363d5761363c613220565b5b6136468261315c565b9050602081019050919050565b600061366661366184613622565b613280565b90508281526020810184848401111561368257613681613363565b5b61368d848285613399565b509392505050565b600082601f8301126136aa576136a961321b565b5b81356136ba848260208601613653565b91505092915050565b6000806000606084860312156136dc576136db612e10565b5b60006136ea86828701612e63565b93505060206136fb86828701612e99565b925050604084013567ffffffffffffffff81111561371c5761371b612e15565b5b61372886828701613695565b9150509250925092565b61373b81612e3a565b82525050565b60006020820190506137566000830184613732565b92915050565b61376581612f9d565b811461377057600080fd5b50565b6000813590506137828161375c565b92915050565b6000806040838503121561379f5761379e612e10565b5b60006137ad85828601612e63565b92505060206137be85828601613773565b9150509250929050565b6000602082840312156137de576137dd612e10565b5b600082013567ffffffffffffffff8111156137fc576137fb612e15565b5b61380884828501613695565b91505092915050565b6000806040838503121561382857613827612e10565b5b600061383685828601612e63565b925050602061384785828601612e63565b9150509250929050565b600080600080600060a0868803121561386d5761386c612e10565b5b600061387b88828901612e63565b955050602061388c88828901612e63565b945050604061389d88828901612e99565b93505060606138ae88828901612e99565b925050608086013567ffffffffffffffff8111156138cf576138ce612e15565b5b6138db888289016133ea565b9150509295509295909350565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000613944602a83613118565b915061394f826138e8565b604082019050919050565b6000602082019050818103600083015261397381613937565b9050919050565b7f61646472657373206e6f74206164646564000000000000000000000000000000600082015250565b60006139b0601183613118565b91506139bb8261397a565b602082019050919050565b600060208201905081810360008301526139df816139a3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613a4f82612e78565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a8257613a81613a15565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613ad457607f821691505b60208210811415613ae857613ae7613a8d565b5b50919050565b7f6f7267616e697a6174696f6e206e6f7420616464656400000000000000000000600082015250565b6000613b24601683613118565b9150613b2f82613aee565b602082019050919050565b60006020820190508181036000830152613b5381613b17565b9050919050565b6000613b6582612e78565b9150613b7083612e78565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ba557613ba4613a15565b5b828201905092915050565b7f506c6561736520616464206f7267616e697a6174696f6e206669727374000000600082015250565b6000613be6601d83613118565b9150613bf182613bb0565b602082019050919050565b60006020820190508181036000830152613c1581613bd9565b9050919050565b7f6172656120616c72656164792073657420666f722074686973206f7267616e6960008201527f7a6174696f6e0000000000000000000000000000000000000000000000000000602082015250565b6000613c78602683613118565b9150613c8382613c1c565b604082019050919050565b60006020820190508181036000830152613ca781613c6b565b9050919050565b7f74686973206f7267616e697a6174696f6e20646f6573206e6f7420686176652060008201527f7065726d697373696f6e20746f20726563656976652070617274206f6620746860208201527f6520626174636800000000000000000000000000000000000000000000000000604082015250565b6000613d30604783613118565b9150613d3b82613cae565b606082019050919050565b60006020820190508181036000830152613d5f81613d23565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000613dc2602983613118565b9150613dcd82613d66565b604082019050919050565b60006020820190508181036000830152613df181613db5565b9050919050565b7f6164647265737320616c72656164792061646465640000000000000000000000600082015250565b6000613e2e601583613118565b9150613e3982613df8565b602082019050919050565b60006020820190508181036000830152613e5d81613e21565b9050919050565b600081905092915050565b6000613e7a8261310d565b613e848185613e64565b9350613e94818560208601613129565b80840191505092915050565b6000613eac8284613e6f565b915081905092915050565b7f746f206578636c756465206163636f756e7420616c746f67657468657220757360008201527f65207375624f7267206d6574686f640000000000000000000000000000000000602082015250565b6000613f13602f83613118565b9150613f1e82613eb7565b604082019050919050565b60006020820190508181036000830152613f4281613f06565b9050919050565b7f74686973206163636f756e74206973206e6f742072656769737465726564207460008201527f6f20746865206172656120737065636966696564000000000000000000000000602082015250565b6000613fa5603483613118565b9150613fb082613f49565b604082019050919050565b60006020820190508181036000830152613fd481613f98565b9050919050565b7f74686973206f7267616e697a6174696f6e20646f6573206e6f7420686176652060008201527f7065726d697373696f6e20746f2072656365697665207468697320627564676560208201527f7400000000000000000000000000000000000000000000000000000000000000604082015250565b600061405d604183613118565b915061406882613fdb565b606082019050919050565b6000602082019050818103600083015261408c81614050565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006140ef602683613118565b91506140fa82614093565b604082019050919050565b6000602082019050818103600083015261411e816140e2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061415b602083613118565b915061416682614125565b602082019050919050565b6000602082019050818103600083015261418a8161414e565b9050919050565b60008190508160005260206000209050919050565b600081546141b381613abc565b6141bd8186613118565b945060018216600081146141d857600181146141ea5761421d565b60ff198316865260208601935061421d565b6141f385614191565b60005b83811015614215578154818901526001820191506020810190506141f6565b808801955050505b50505092915050565b6000602082019050818103600083015261424081846141a6565b905092915050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006142a4602183613118565b91506142af82614248565b604082019050919050565b600060208201905081810360008301526142d381614297565b9050919050565b60006040820190506142ef6000830185612eee565b6142fc6020830184612eee565b9392505050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b600061435f602e83613118565b915061436a82614303565b604082019050919050565b6000602082019050818103600083015261438e81614352565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b60006143f1602983613118565b91506143fc82614395565b604082019050919050565b60006020820190508181036000830152614420816143e4565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614483602383613118565b915061448e82614427565b604082019050919050565b600060208201905081810360008301526144b281614476565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000614515602483613118565b9150614520826144b9565b604082019050919050565b6000602082019050818103600083015261454481614508565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006145728261454b565b61457c8185614556565b935061458c818560208601613129565b6145958161315c565b840191505092915050565b600060a0820190506145b56000830188613732565b6145c26020830187613732565b6145cf6040830186612eee565b6145dc6060830185612eee565b81810360808301526145ee8184614567565b90509695505050505050565b60008151905061460981612f44565b92915050565b60006020828403121561462557614624612e10565b5b6000614633848285016145fa565b91505092915050565b60008160e01c9050919050565b600060033d11156146685760046000803e61466560005161463c565b90505b90565b600060443d101561467b576146fe565b614683612e06565b60043d036004823e80513d602482011167ffffffffffffffff821117156146ab5750506146fe565b808201805167ffffffffffffffff8111156146c957505050506146fe565b80602083010160043d0385018111156146e65750505050506146fe565b6146f58260200185018661324f565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061475d603483613118565b915061476882614701565b604082019050919050565b6000602082019050818103600083015261478c81614750565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006147ef602883613118565b91506147fa82614793565b604082019050919050565b6000602082019050818103600083015261481e816147e2565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000614881602883613118565b915061488c82614825565b604082019050919050565b600060208201905081810360008301526148b081614874565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614913602583613118565b915061491e826148b7565b604082019050919050565b6000602082019050818103600083015261494281614906565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006149a5602a83613118565b91506149b082614949565b604082019050919050565b600060208201905081810360008301526149d481614998565b9050919050565b600060408201905081810360008301526149f58185613060565b90508181036020830152614a098184613060565b90509392505050565b600060a082019050614a276000830188613732565b614a346020830187613732565b8181036040830152614a468186613060565b90508181036060830152614a5a8185613060565b90508181036080830152614a6e8184614567565b9050969550505050505056fea26469706673582212206e4edca80c83714a20dee6b4dd04d3b0340acfd9996022712010f65386034d6564736f6c634300080a003368747470733a2f2f636f6e736f6c652e66696c65626173652e636f6d2f6275636b6574732f6170702d6f7263616d656e746f2f7b617265617d2e6a736f6e",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c35760003560e01c8063715018a6116100f9578063cdda771511610097578063f242432a11610071578063f242432a14610518578063f2fde38b14610534578063f5298aca14610550578063f84f7dd01461056c576101c3565b8063cdda7715146104ac578063db401541146104ca578063e985e9c5146104e8576101c3565b80638da5cb5b116100d35780638da5cb5b14610424578063a22cb46514610442578063b55cd04b1461045e578063bf40fac11461047c576101c3565b8063715018a6146103ce5780637f14ba3f146103d85780637f7063e7146103f4576101c3565b80631ef16b43116101665780632eb2c2d6116101405780632eb2c2d6146103365780634e1273f4146103525780635fd4b08a1461038257806361ae0309146103b2576101c3565b80631ef16b43146102ca57806321636aa5146102e857806328eece1314610306576101c3565b80630ca1c5c9116101a25780630ca1c5c9146102445780630e89341c14610262578063156e29f614610292578063169bc486146102ae576101c3565b8062fdd58e146101c857806301ffc9a7146101f85780630c89c42114610228575b600080fd5b6101e260048036038101906101dd9190612eae565b61058a565b6040516101ef9190612efd565b60405180910390f35b610212600480360381019061020d9190612f70565b610653565b60405161021f9190612fb8565b60405180910390f35b610242600480360381019061023d9190612fd3565b610735565b005b61024c6108c4565b60405161025991906130be565b60405180910390f35b61027c600480360381019061027791906130e0565b610976565b60405161028991906131a6565b60405180910390f35b6102ac60048036038101906102a791906131c8565b610a0a565b005b6102c860048036038101906102c39190612eae565b610b28565b005b6102d2610c89565b6040516102df9190612efd565b60405180910390f35b6102f0610c8f565b6040516102fd9190612efd565b60405180910390f35b610320600480360381019061031b9190612fd3565b610c95565b60405161032d91906130be565b60405180910390f35b610350600480360381019061034b9190613418565b610e60565b005b61036c600480360381019061036791906135aa565b610f52565b60405161037991906130be565b60405180910390f35b61039c60048036038101906103979190612fd3565b61106b565b6040516103a991906131a6565b60405180910390f35b6103cc60048036038101906103c791906136c3565b61113c565b005b6103d66112c1565b005b6103f260048036038101906103ed9190612eae565b6112d5565b005b61040e600480360381019061040991906130e0565b6113d2565b60405161041b9190612efd565b60405180910390f35b61042c6113f6565b6040516104399190613741565b60405180910390f35b61045c60048036038101906104579190613788565b611420565b005b610466611436565b60405161047391906130be565b60405180910390f35b610496600480360381019061049191906137c8565b6114e8565b6040516104a39190613741565b60405180910390f35b6104b4611530565b6040516104c191906130be565b60405180910390f35b6104d261162b565b6040516104df9190612efd565b60405180910390f35b61050260048036038101906104fd9190613811565b611631565b60405161050f9190612fb8565b60405180910390f35b610532600480360381019061052d9190613851565b6116c5565b005b61054e60048036038101906105499190612fd3565b61177d565b005b61056a600480360381019061056591906131c8565b611801565b005b6105746118e9565b6040516105819190612efd565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f29061395a565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061071e57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061072e575061072d82611912565b5b9050919050565b61073d61197c565b60011515600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600954815260200190815260200160002060009054906101000a900460ff161515146107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da906139c6565b60405180910390fd5b60006107ee82610c95565b905060005b81518110156108be5760001515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848481518110610854576108536139e6565b5b6020026020010151815260200190815260200160002060009054906101000a900460ff16151514156108875750506108c1565b6108ab8383838151811061089e5761089d6139e6565b5b60200260200101516119fa565b80806108b690613a44565b9150506107f3565b50505b50565b60606000600d8054905067ffffffffffffffff8111156108e7576108e6613220565b5b6040519080825280602002602001820160405280156109155781602001602082028036833780820191505090505b50905060005b600d8054905081101561096e57600760008281526020019081526020016000205482828151811061094f5761094e6139e6565b5b602002602001018181525050808061096690613a44565b91505061091b565b508091505090565b60606002805461098590613abc565b80601f01602080910402602001604051908101604052809291908181526020018280546109b190613abc565b80156109fe5780601f106109d3576101008083540402835291602001916109fe565b820191906000526020600020905b8154815290600101906020018083116109e157829003601f168201915b50505050509050919050565b610a1261197c565b60011515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600954815260200190815260200160002060009054906101000a900460ff16151514610ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaf90613b3a565b60405180910390fd5b80600760008481526020019081526020016000206000828254610adb9190613b5a565b92505081905550610b238383836040518060400160405280600481526020017f3078303000000000000000000000000000000000000000000000000000000000815250611af8565b505050565b610b3061197c565b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600954815260200190815260200160002060009054906101000a900460ff16151514610bd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcd90613bfc565b60405180910390fd5b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151415610c7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7290613c8e565b60405180910390fd5b610c858282611ca9565b5050565b600b5481565b60095481565b606060011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600954815260200190815260200160002060009054906101000a900460ff16151514610d3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3490613b3a565b60405180910390fd5b6000600d8054905067ffffffffffffffff811115610d5e57610d5d613220565b5b604051908082528060200260200182016040528015610d8c5781602001602082028036833780820191505090505b5090506000600190506000600190505b600d80549050811015610e555760011515600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151415610e425780838381518110610e2757610e266139e6565b5b6020026020010181815250508180610e3e90613a44565b9250505b8080610e4d90613a44565b915050610d9c565b508192505050919050565b60005b8351811015610f3d5760011515600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868481518110610ec457610ec36139e6565b5b6020026020010151815260200190815260200160002060009054906101000a900460ff16151514610f2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2190613d46565b60405180910390fd5b8080610f3590613a44565b915050610e63565b50610f4b8585858585611da7565b5050505050565b60608151835114610f98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8f90613dd8565b60405180910390fd5b6000835167ffffffffffffffff811115610fb557610fb4613220565b5b604051908082528060200260200182016040528015610fe35781602001602082028036833780820191505090505b50905060005b845181101561106057611030858281518110611008576110076139e6565b5b6020026020010151858381518110611023576110226139e6565b5b602002602001015161058a565b828281518110611043576110426139e6565b5b6020026020010181815250508061105990613a44565b9050610fe9565b508091505092915050565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546110b790613abc565b80601f01602080910402602001604051908101604052809291908181526020018280546110e390613abc565b80156111305780601f1061110557610100808354040283529160200191611130565b820191906000526020600020905b81548152906001019060200180831161111357829003601f168201915b50505050509050919050565b61114461197c565b60011515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600954815260200190815260200160002060009054906101000a900460ff16151514156111eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e290613e44565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908051906020019061123e929190612d63565b50826006826040516112509190613ea0565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112a883600954611ca9565b60095482146112bc576112bb8383611ca9565b5b505050565b6112c961197c565b6112d36000611e48565b565b6112dd61197c565b60008111611320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131790613f29565b60405180910390fd5b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff161515146113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb90613fbb565b60405180910390fd5b6113ce82826119fa565b5050565b600d81815481106113e257600080fd5b906000526020600020016000915090505481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61143261142b611f0e565b8383611f16565b5050565b60606000600d8054905067ffffffffffffffff81111561145957611458613220565b5b6040519080825280602002602001820160405280156114875781602001602082028036833780820191505090505b50905060005b600d805490508110156114e05760086000828152602001908152602001600020548282815181106114c1576114c06139e6565b5b60200260200101818152505080806114d890613a44565b91505061148d565b508091505090565b60006006826040516114fa9190613ea0565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b606060006001600d805490506115469190613b5a565b67ffffffffffffffff81111561155f5761155e613220565b5b60405190808252806020026020018201604052801561158d5781602001602082028036833780820191505090505b5090506000805b60138054905081101561160057601381815481106115b5576115b46139e6565b5b90600052602060002001548382815181106115d3576115d26139e6565b5b60200260200101818152505081806115ea90613a44565b92505080806115f890613a44565b915050611594565b50600e54828281518110611617576116166139e6565b5b602002602001018181525050819250505090565b600a5481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60011515600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff16151514611769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176090614073565b60405180910390fd5b6117768585858585612083565b5050505050565b61178561197c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ec90614105565b60405180910390fd5b6117fe81611e48565b50565b61180961197c565b60011515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600954815260200190815260200160002060009054906101000a900460ff161515146118af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a690613b3a565b60405180910390fd5b806008600084815260200190815260200160002060008282546118d29190613b5a565b925050819055506118e4838383612124565b505050565b600c5481565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611984611f0e565b73ffffffffffffffffffffffffffffffffffffffff166119a26113f6565b73ffffffffffffffffffffffffffffffffffffffff16146119f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ef90614171565b60405180910390fd5b565b60001515818373ffffffffffffffffffffffffffffffffffffffff167fb8ab71d168de2395481e4653bcaf8113b8d414ee4f783094c4a67ec50b060f28600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051611a839190614226565b60405180910390a46000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611b68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5f906142ba565b60405180910390fd5b6000611b72611f0e565b90506000611b7f8561236b565b90506000611b8c8561236b565b9050611b9d836000898585896123e5565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bfc9190613b5a565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611c7a9291906142da565b60405180910390a4611c91836000898585896123ed565b611ca0836000898989896123f5565b50505050505050565b60011515818373ffffffffffffffffffffffffffffffffffffffff167fb8ab71d168de2395481e4653bcaf8113b8d414ee4f783094c4a67ec50b060f28600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051611d329190614226565b60405180910390a46001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b611daf611f0e565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611df55750611df485611def611f0e565b611631565b5b611e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2b90614375565b60405180910390fd5b611e4185858585856125cd565b5050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7c90614407565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516120769190612fb8565b60405180910390a3505050565b61208b611f0e565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806120d157506120d0856120cb611f0e565b611631565b5b612110576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210790614375565b60405180910390fd5b61211d85858585856128ef565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612194576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218b90614499565b60405180910390fd5b600061219e611f0e565b905060006121ab8461236b565b905060006121b88461236b565b90506121d8838760008585604051806020016040528060008152506123e5565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508481101561226f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122669061452b565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161233c9291906142da565b60405180910390a4612362848860008686604051806020016040528060008152506123ed565b50505050505050565b60606000600167ffffffffffffffff81111561238a57612389613220565b5b6040519080825280602002602001820160405280156123b85781602001602082028036833780820191505090505b50905082816000815181106123d0576123cf6139e6565b5b60200260200101818152505080915050919050565b505050505050565b505050505050565b6124148473ffffffffffffffffffffffffffffffffffffffff166118ef565b156125c5578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b815260040161245a9594939291906145a0565b6020604051808303816000875af192505050801561249657506040513d601f19601f82011682018060405250810190612493919061460f565b60015b61253c576124a2614649565b806308c379a014156124ff57506124b761466b565b806124c25750612501565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124f691906131a6565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253390614773565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146125c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ba90614805565b60405180910390fd5b505b505050505050565b8151835114612611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260890614897565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161267890614929565b60405180910390fd5b600061268b611f0e565b905061269b8187878787876123e5565b60005b845181101561284c5760008582815181106126bc576126bb6139e6565b5b6020026020010151905060008583815181106126db576126da6139e6565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561277c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612773906149bb565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128319190613b5a565b925050819055505050508061284590613a44565b905061269e565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516128c39291906149db565b60405180910390a46128d98187878787876123ed565b6128e7818787878787612b8b565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561295f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295690614929565b60405180910390fd5b6000612969611f0e565b905060006129768561236b565b905060006129838561236b565b90506129938389898585896123e5565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015612a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a21906149bb565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612adf9190613b5a565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051612b5c9291906142da565b60405180910390a4612b72848a8a86868a6123ed565b612b80848a8a8a8a8a6123f5565b505050505050505050565b612baa8473ffffffffffffffffffffffffffffffffffffffff166118ef565b15612d5b578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612bf0959493929190614a12565b6020604051808303816000875af1925050508015612c2c57506040513d601f19601f82011682018060405250810190612c29919061460f565b60015b612cd257612c38614649565b806308c379a01415612c955750612c4d61466b565b80612c585750612c97565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c8c91906131a6565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cc990614773565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612d59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5090614805565b60405180910390fd5b505b505050505050565b828054612d6f90613abc565b90600052602060002090601f016020900481019282612d915760008555612dd8565b82601f10612daa57805160ff1916838001178555612dd8565b82800160010185558215612dd8579182015b82811115612dd7578251825591602001919060010190612dbc565b5b509050612de59190612de9565b5090565b5b80821115612e02576000816000905550600101612dea565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612e4582612e1a565b9050919050565b612e5581612e3a565b8114612e6057600080fd5b50565b600081359050612e7281612e4c565b92915050565b6000819050919050565b612e8b81612e78565b8114612e9657600080fd5b50565b600081359050612ea881612e82565b92915050565b60008060408385031215612ec557612ec4612e10565b5b6000612ed385828601612e63565b9250506020612ee485828601612e99565b9150509250929050565b612ef781612e78565b82525050565b6000602082019050612f126000830184612eee565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612f4d81612f18565b8114612f5857600080fd5b50565b600081359050612f6a81612f44565b92915050565b600060208284031215612f8657612f85612e10565b5b6000612f9484828501612f5b565b91505092915050565b60008115159050919050565b612fb281612f9d565b82525050565b6000602082019050612fcd6000830184612fa9565b92915050565b600060208284031215612fe957612fe8612e10565b5b6000612ff784828501612e63565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61303581612e78565b82525050565b6000613047838361302c565b60208301905092915050565b6000602082019050919050565b600061306b82613000565b613075818561300b565b93506130808361301c565b8060005b838110156130b1578151613098888261303b565b97506130a383613053565b925050600181019050613084565b5085935050505092915050565b600060208201905081810360008301526130d88184613060565b905092915050565b6000602082840312156130f6576130f5612e10565b5b600061310484828501612e99565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561314757808201518184015260208101905061312c565b83811115613156576000848401525b50505050565b6000601f19601f8301169050919050565b60006131788261310d565b6131828185613118565b9350613192818560208601613129565b61319b8161315c565b840191505092915050565b600060208201905081810360008301526131c0818461316d565b905092915050565b6000806000606084860312156131e1576131e0612e10565b5b60006131ef86828701612e63565b935050602061320086828701612e99565b925050604061321186828701612e99565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132588261315c565b810181811067ffffffffffffffff8211171561327757613276613220565b5b80604052505050565b600061328a612e06565b9050613296828261324f565b919050565b600067ffffffffffffffff8211156132b6576132b5613220565b5b602082029050602081019050919050565b600080fd5b60006132df6132da8461329b565b613280565b90508083825260208201905060208402830185811115613302576133016132c7565b5b835b8181101561332b57806133178882612e99565b845260208401935050602081019050613304565b5050509392505050565b600082601f83011261334a5761334961321b565b5b813561335a8482602086016132cc565b91505092915050565b600080fd5b600067ffffffffffffffff82111561338357613382613220565b5b61338c8261315c565b9050602081019050919050565b82818337600083830152505050565b60006133bb6133b684613368565b613280565b9050828152602081018484840111156133d7576133d6613363565b5b6133e2848285613399565b509392505050565b600082601f8301126133ff576133fe61321b565b5b813561340f8482602086016133a8565b91505092915050565b600080600080600060a0868803121561343457613433612e10565b5b600061344288828901612e63565b955050602061345388828901612e63565b945050604086013567ffffffffffffffff81111561347457613473612e15565b5b61348088828901613335565b935050606086013567ffffffffffffffff8111156134a1576134a0612e15565b5b6134ad88828901613335565b925050608086013567ffffffffffffffff8111156134ce576134cd612e15565b5b6134da888289016133ea565b9150509295509295909350565b600067ffffffffffffffff82111561350257613501613220565b5b602082029050602081019050919050565b6000613526613521846134e7565b613280565b90508083825260208201905060208402830185811115613549576135486132c7565b5b835b81811015613572578061355e8882612e63565b84526020840193505060208101905061354b565b5050509392505050565b600082601f8301126135915761359061321b565b5b81356135a1848260208601613513565b91505092915050565b600080604083850312156135c1576135c0612e10565b5b600083013567ffffffffffffffff8111156135df576135de612e15565b5b6135eb8582860161357c565b925050602083013567ffffffffffffffff81111561360c5761360b612e15565b5b61361885828601613335565b9150509250929050565b600067ffffffffffffffff82111561363d5761363c613220565b5b6136468261315c565b9050602081019050919050565b600061366661366184613622565b613280565b90508281526020810184848401111561368257613681613363565b5b61368d848285613399565b509392505050565b600082601f8301126136aa576136a961321b565b5b81356136ba848260208601613653565b91505092915050565b6000806000606084860312156136dc576136db612e10565b5b60006136ea86828701612e63565b93505060206136fb86828701612e99565b925050604084013567ffffffffffffffff81111561371c5761371b612e15565b5b61372886828701613695565b9150509250925092565b61373b81612e3a565b82525050565b60006020820190506137566000830184613732565b92915050565b61376581612f9d565b811461377057600080fd5b50565b6000813590506137828161375c565b92915050565b6000806040838503121561379f5761379e612e10565b5b60006137ad85828601612e63565b92505060206137be85828601613773565b9150509250929050565b6000602082840312156137de576137dd612e10565b5b600082013567ffffffffffffffff8111156137fc576137fb612e15565b5b61380884828501613695565b91505092915050565b6000806040838503121561382857613827612e10565b5b600061383685828601612e63565b925050602061384785828601612e63565b9150509250929050565b600080600080600060a0868803121561386d5761386c612e10565b5b600061387b88828901612e63565b955050602061388c88828901612e63565b945050604061389d88828901612e99565b93505060606138ae88828901612e99565b925050608086013567ffffffffffffffff8111156138cf576138ce612e15565b5b6138db888289016133ea565b9150509295509295909350565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000613944602a83613118565b915061394f826138e8565b604082019050919050565b6000602082019050818103600083015261397381613937565b9050919050565b7f61646472657373206e6f74206164646564000000000000000000000000000000600082015250565b60006139b0601183613118565b91506139bb8261397a565b602082019050919050565b600060208201905081810360008301526139df816139a3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613a4f82612e78565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a8257613a81613a15565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613ad457607f821691505b60208210811415613ae857613ae7613a8d565b5b50919050565b7f6f7267616e697a6174696f6e206e6f7420616464656400000000000000000000600082015250565b6000613b24601683613118565b9150613b2f82613aee565b602082019050919050565b60006020820190508181036000830152613b5381613b17565b9050919050565b6000613b6582612e78565b9150613b7083612e78565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ba557613ba4613a15565b5b828201905092915050565b7f506c6561736520616464206f7267616e697a6174696f6e206669727374000000600082015250565b6000613be6601d83613118565b9150613bf182613bb0565b602082019050919050565b60006020820190508181036000830152613c1581613bd9565b9050919050565b7f6172656120616c72656164792073657420666f722074686973206f7267616e6960008201527f7a6174696f6e0000000000000000000000000000000000000000000000000000602082015250565b6000613c78602683613118565b9150613c8382613c1c565b604082019050919050565b60006020820190508181036000830152613ca781613c6b565b9050919050565b7f74686973206f7267616e697a6174696f6e20646f6573206e6f7420686176652060008201527f7065726d697373696f6e20746f20726563656976652070617274206f6620746860208201527f6520626174636800000000000000000000000000000000000000000000000000604082015250565b6000613d30604783613118565b9150613d3b82613cae565b606082019050919050565b60006020820190508181036000830152613d5f81613d23565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000613dc2602983613118565b9150613dcd82613d66565b604082019050919050565b60006020820190508181036000830152613df181613db5565b9050919050565b7f6164647265737320616c72656164792061646465640000000000000000000000600082015250565b6000613e2e601583613118565b9150613e3982613df8565b602082019050919050565b60006020820190508181036000830152613e5d81613e21565b9050919050565b600081905092915050565b6000613e7a8261310d565b613e848185613e64565b9350613e94818560208601613129565b80840191505092915050565b6000613eac8284613e6f565b915081905092915050565b7f746f206578636c756465206163636f756e7420616c746f67657468657220757360008201527f65207375624f7267206d6574686f640000000000000000000000000000000000602082015250565b6000613f13602f83613118565b9150613f1e82613eb7565b604082019050919050565b60006020820190508181036000830152613f4281613f06565b9050919050565b7f74686973206163636f756e74206973206e6f742072656769737465726564207460008201527f6f20746865206172656120737065636966696564000000000000000000000000602082015250565b6000613fa5603483613118565b9150613fb082613f49565b604082019050919050565b60006020820190508181036000830152613fd481613f98565b9050919050565b7f74686973206f7267616e697a6174696f6e20646f6573206e6f7420686176652060008201527f7065726d697373696f6e20746f2072656365697665207468697320627564676560208201527f7400000000000000000000000000000000000000000000000000000000000000604082015250565b600061405d604183613118565b915061406882613fdb565b606082019050919050565b6000602082019050818103600083015261408c81614050565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006140ef602683613118565b91506140fa82614093565b604082019050919050565b6000602082019050818103600083015261411e816140e2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061415b602083613118565b915061416682614125565b602082019050919050565b6000602082019050818103600083015261418a8161414e565b9050919050565b60008190508160005260206000209050919050565b600081546141b381613abc565b6141bd8186613118565b945060018216600081146141d857600181146141ea5761421d565b60ff198316865260208601935061421d565b6141f385614191565b60005b83811015614215578154818901526001820191506020810190506141f6565b808801955050505b50505092915050565b6000602082019050818103600083015261424081846141a6565b905092915050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006142a4602183613118565b91506142af82614248565b604082019050919050565b600060208201905081810360008301526142d381614297565b9050919050565b60006040820190506142ef6000830185612eee565b6142fc6020830184612eee565b9392505050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b600061435f602e83613118565b915061436a82614303565b604082019050919050565b6000602082019050818103600083015261438e81614352565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b60006143f1602983613118565b91506143fc82614395565b604082019050919050565b60006020820190508181036000830152614420816143e4565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614483602383613118565b915061448e82614427565b604082019050919050565b600060208201905081810360008301526144b281614476565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000614515602483613118565b9150614520826144b9565b604082019050919050565b6000602082019050818103600083015261454481614508565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006145728261454b565b61457c8185614556565b935061458c818560208601613129565b6145958161315c565b840191505092915050565b600060a0820190506145b56000830188613732565b6145c26020830187613732565b6145cf6040830186612eee565b6145dc6060830185612eee565b81810360808301526145ee8184614567565b90509695505050505050565b60008151905061460981612f44565b92915050565b60006020828403121561462557614624612e10565b5b6000614633848285016145fa565b91505092915050565b60008160e01c9050919050565b600060033d11156146685760046000803e61466560005161463c565b90505b90565b600060443d101561467b576146fe565b614683612e06565b60043d036004823e80513d602482011167ffffffffffffffff821117156146ab5750506146fe565b808201805167ffffffffffffffff8111156146c957505050506146fe565b80602083010160043d0385018111156146e65750505050506146fe565b6146f58260200185018661324f565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061475d603483613118565b915061476882614701565b604082019050919050565b6000602082019050818103600083015261478c81614750565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006147ef602883613118565b91506147fa82614793565b604082019050919050565b6000602082019050818103600083015261481e816147e2565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000614881602883613118565b915061488c82614825565b604082019050919050565b600060208201905081810360008301526148b081614874565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614913602583613118565b915061491e826148b7565b604082019050919050565b6000602082019050818103600083015261494281614906565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006149a5602a83613118565b91506149b082614949565b604082019050919050565b600060208201905081810360008301526149d481614998565b9050919050565b600060408201905081810360008301526149f58185613060565b90508181036020830152614a098184613060565b90509392505050565b600060a082019050614a276000830188613732565b614a346020830187613732565b8181036040830152614a468186613060565b90508181036060830152614a5a8185613060565b90508181036080830152614a6e8184614567565b9050969550505050505056fea26469706673582212206e4edca80c83714a20dee6b4dd04d3b0340acfd9996022712010f65386034d6564736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "_orgAddress": {
        "details": "mapping name to address of org"
      },
      "_orgArea": {
        "details": "maps address to policy area to bool"
      },
      "_orgName": {
        "details": "mapping address to name of org"
      },
      "_totalBurned": {
        "details": "maps policy area to total burned"
      },
      "_totalMinted": {
        "details": "maps policy area to total minted"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 144,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 146,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1916,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_orgArea",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 1921,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_orgName",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 1926,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_orgAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 1931,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_totalMinted",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1936,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_totalBurned",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1939,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "OUTROS",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1942,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "EDUCACAO",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1945,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "INFRA",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1948,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "SAUDE",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1956,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "AREAS",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1961,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_budget",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1964,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_ed",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1967,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_infra",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 1970,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_health",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 1979,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_other",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 1987,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_budgetPart",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}