{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "added",
          "type": "bool"
        }
      ],
      "name": "Registry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "AREAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EDUCACAO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INFRA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OUTROS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SAUDE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "org",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        }
      ],
      "name": "addArea",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "org",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        }
      ],
      "name": "addOrg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "org",
          "type": "address"
        }
      ],
      "name": "getAreas",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitialBudget",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "areas",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "org",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        }
      ],
      "name": "subArea",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "org",
          "type": "address"
        }
      ],
      "name": "subOrg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd40a3edb3a324279b14a8bcbef3d30e27b977ff02b68fe8c9921feaf3382417",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "4355691",
    "logsBloom": "0x
    "blockHash": "0xcd2bf38f4ce38f7dca5dd2d790709d35f2620280fb94c50c4da82e2e647b4937",
    "transactionHash": "0xdd40a3edb3a324279b14a8bcbef3d30e27b977ff02b68fe8c9921feaf3382417",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xdd40a3edb3a324279b14a8bcbef3d30e27b977ff02b68fe8c9921feaf3382417",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcd2bf38f4ce38f7dca5dd2d790709d35f2620280fb94c50c4da82e2e647b4937"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xdd40a3edb3a324279b14a8bcbef3d30e27b977ff02b68fe8c9921feaf3382417",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000ba43b7400",
        "logIndex": 1,
        "blockHash": "0xcd2bf38f4ce38f7dca5dd2d790709d35f2620280fb94c50c4da82e2e647b4937"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xdd40a3edb3a324279b14a8bcbef3d30e27b977ff02b68fe8c9921feaf3382417",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000ba43b7400",
        "logIndex": 2,
        "blockHash": "0xcd2bf38f4ce38f7dca5dd2d790709d35f2620280fb94c50c4da82e2e647b4937"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xdd40a3edb3a324279b14a8bcbef3d30e27b977ff02b68fe8c9921feaf3382417",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000174876e800",
        "logIndex": 3,
        "blockHash": "0xcd2bf38f4ce38f7dca5dd2d790709d35f2620280fb94c50c4da82e2e647b4937"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xdd40a3edb3a324279b14a8bcbef3d30e27b977ff02b68fe8c9921feaf3382417",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ba43b74000",
        "logIndex": 4,
        "blockHash": "0xcd2bf38f4ce38f7dca5dd2d790709d35f2620280fb94c50c4da82e2e647b4937"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "4355691",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d0a1d39c67524dabed9884ca82268048",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"Registry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AREAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EDUCACAO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INFRA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OUTROS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAUDE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"org\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"}],\"name\":\"addArea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"org\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"}],\"name\":\"addOrg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"org\",\"type\":\"address\"}],\"name\":\"getAreas\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialBudget\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"areas\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"org\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"}],\"name\":\"subArea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"org\",\"type\":\"address\"}],\"name\":\"subOrg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"_orgArea\":{\"details\":\"mapping address to policy area to bool\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/orcamento.sol\":\"OrcamentoUniao2023\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/orcamento.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract OrcamentoUniao2023 is ERC1155, Ownable {\\r\\n    \\r\\n    /**\\r\\n     * @dev mapping address to policy area to bool\\r\\n     * @notice this format is used because an organization can be active in multiple policy area\\r\\n     */\\r\\n    mapping(address => mapping(uint256 => bool)) private _orgArea;\\r\\n \\r\\n    //\\r\\n    uint256 public OUTROS = 0;\\r\\n    uint256 public EDUCACAO = 1;\\r\\n    uint256 public INFRA = 2;\\r\\n    uint256 public SAUDE = 3;\\r\\n    // \\r\\n    uint256[] public AREAS = [OUTROS, EDUCACAO, INFRA, SAUDE ];\\r\\n\\r\\n    // verba e percentuais da verba destinados a cada area\\r\\n    // PASSAR PELO CONSTRUCTOR\\r\\n    uint256 private _budget = 10**12;\\r\\n    uint256 private _ed = 5;\\r\\n    uint256 private _infra = 10; \\r\\n    uint256 private _health = 5;\\r\\n    uint256 private _other = 100 - _health - _ed - _infra;\\r\\n\\r\\n    uint256[] private _budgetPart = [_other, _ed, _infra, _health];\\r\\n\\r\\n    event Registry(address indexed account, uint256 indexed area, bool indexed added);\\r\\n\\r\\n    constructor() ERC1155(\\\"https://console.filebase.com/buckets/app-orcamento/{area}.json\\\") {\\r\\n        \\r\\n        _mint(msg.sender, SAUDE, (_budget * _health) / 100, \\\"\\\");\\r\\n        _mint(msg.sender, EDUCACAO, (_budget * _ed) / 100, \\\"\\\");\\r\\n        _mint(msg.sender, INFRA, (_budget * _infra) / 100, \\\"\\\");\\r\\n        _mint(msg.sender, OUTROS, (_budget * _other) / 100, \\\"\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n    function getInitialBudget() public view returns(uint256[] memory){\\r\\n        uint256[] memory budget = new uint256[](AREAS.length + 1);\\r\\n        uint256 j=0;\\r\\n        for(uint256 i=0; i<_budgetPart.length; i++){\\r\\n            budget[i] = _budgetPart[i];\\r\\n            j++;\\r\\n        }\\r\\n        // j++;\\r\\n        budget[j] = _budget;\\r\\n        \\r\\n        return budget;\\r\\n    }\\r\\n\\r\\n\\r\\n    // TODO function override que verifica se address ta cadastrado antes de chamar balanceOf\\r\\n\\r\\n    function getAreas(address org) public view returns(uint256[] memory){\\r\\n        require(_orgArea[org][OUTROS] == true, \\\"organization not added\\\");\\r\\n        \\r\\n        uint[] memory areas = new uint[](AREAS.length);\\r\\n        uint j = 1;\\r\\n        for(uint256 i = 1; i < AREAS.length; i++){\\r\\n            if(_orgArea[org][i] == true){\\r\\n                areas[j] = i;\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n        return areas;\\r\\n    }\\r\\n    \\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 area,\\r\\n        uint256 amount\\r\\n    ) public onlyOwner {\\r\\n        require(_orgArea[to][OUTROS] == true, \\\"organization not added\\\");\\r\\n\\r\\n        _mint(to, area, amount, '0x00');\\r\\n    }\\r\\n\\r\\n    function burn(\\r\\n        address from,\\r\\n        uint256 area,\\r\\n        uint256 amount\\r\\n    ) public onlyOwner {\\r\\n        require(_orgArea[from][OUTROS] == true, \\\"organization not added\\\");\\r\\n\\r\\n        _burn(from, area, amount);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from, \\r\\n        address to, \\r\\n        uint256 area, \\r\\n        uint256 amount, \\r\\n        bytes memory data\\r\\n    ) public override {\\r\\n        require(\\r\\n            _orgArea[to][area] == true, \\\"this organization does not have permission to receive this budget\\\"\\r\\n        );\\r\\n        super.safeTransferFrom(from, to, area, amount, data);\\r\\n    }\\r\\n    \\r\\n    function safeBatchTransferFrom(\\r\\n        address from, \\r\\n        address to, \\r\\n        uint256[] memory areas, \\r\\n        uint256[] memory amounts, \\r\\n        bytes memory data\\r\\n    ) public override {\\r\\n        for(uint256 i = 0; i < areas.length; i++){\\r\\n            require(\\r\\n                _orgArea[to][areas[i]] == true, \\\"this organization does not have permission to receive part of the batch\\\"\\r\\n            );\\r\\n        }\\r\\n        super.safeBatchTransferFrom(from, to, areas, amounts, data);\\r\\n    }\\r\\n    \\r\\n\\r\\n    function addOrg(address org, uint256 area) public onlyOwner {\\r\\n        require(_orgArea[org][OUTROS] != true, \\\"address already added\\\");\\r\\n\\r\\n        _setArea(org, OUTROS);\\r\\n\\r\\n        if(area != OUTROS){\\r\\n            _setArea(org, area);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function subOrg(address org) public onlyOwner {\\r\\n        require(_orgArea[org][OUTROS] == true, \\\"address not added\\\");\\r\\n\\r\\n        uint[] memory areas = getAreas(org);\\r\\n        for(uint256 i = 0; i < areas.length; i++){\\r\\n            if(_orgArea[org][areas[i]] == false){\\r\\n                return;\\r\\n            }\\r\\n            _subArea(org, areas[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function subArea(address org, uint256 area) public onlyOwner {\\r\\n        require(area > 0, 'to exclude account altogether use subOrg method');\\r\\n        require(_orgArea[org][area] == true, 'this account is not registered to the area specified');\\r\\n\\r\\n        _subArea(org, area);\\r\\n    }\\r\\n\\r\\n    function addArea(address org, uint256 area) public onlyOwner{\\r\\n        require(_orgArea[org][OUTROS] == true, 'Please add organization first');\\r\\n        require(_orgArea[org][area] != true, \\\"area already set for this organization\\\");\\r\\n        _setArea(org, area);\\r\\n    }\\r\\n\\r\\n    function _setArea(address org, uint256 area) private {\\r\\n        _orgArea[org][area] = true;\\r\\n        emit Registry(org, area, true);\\r\\n    }\\r\\n\\r\\n    function _subArea(address org, uint256 area) private {\\r\\n        _orgArea[org][area] = false;\\r\\n        emit Registry(org, area, false);\\r\\n    }\\r\\n\\r\\n    //////////////////////////\\r\\n    // TODO: function subArea\\r\\n    /////////////////////////\\r\\n\\r\\n    ////////////////////////////\\r\\n    // teste //////////////\\r\\n    \\r\\n    // event testeEvento(uint256 input, address caller);\\r\\n    // uint256 private umValor;\\r\\n\\r\\n    // function teste(uint256 trossoqualquer) public {\\r\\n    //     require(trossoqualquer == 0, \\\"trossoqualquer nao eh zero\\\");\\r\\n    //     umValor = trossoqualquer;\\r\\n    //     emit testeEvento(umValor, msg.sender);\\r\\n    // }\\r\\n    \\r\\n}\",\"keccak256\":\"0xe42100430d906d6052f3bbd7d2c9694c0f903b2bf4fdc7efe8480f5a478b97c6\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405260006005556001600655600260075560036008556040518060800160405280600554815260200160065481526020016007548152602001600854815250600990600462000053929190620007ca565b5064e8d4a51000600a556005600b55600a600c556005600d55600c54600b54600d54606462000083919062000905565b6200008f919062000905565b6200009b919062000905565b600e556040518060800160405280600e548152602001600b548152602001600c548152602001600d54815250600f906004620000d9929190620007ca565b50348015620000e757600080fd5b506040518060600160405280603e815260200162005341603e913962000113816200024a60201b60201c565b5062000134620001286200026660201b60201c565b6200026e60201b60201c565b62000178336008546064600d54600a5462000150919062000940565b6200015c9190620009d0565b604051806020016040528060008152506200033460201b60201c565b620001bc336006546064600b54600a5462000194919062000940565b620001a09190620009d0565b604051806020016040528060008152506200033460201b60201c565b62000200336007546064600c54600a54620001d8919062000940565b620001e49190620009d0565b604051806020016040528060008152506200033460201b60201c565b62000244336005546064600e54600a546200021c919062000940565b620002289190620009d0565b604051806020016040528060008152506200033460201b60201c565b620010a4565b8060029080519060200190620002629291906200081c565b5050565b600033905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415620003a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200039e9062000a8f565b60405180910390fd5b6000620003b96200026660201b60201c565b90506000620003ce856200051c60201b60201c565b90506000620003e3856200051c60201b60201c565b9050620003fc836000898585896200059d60201b60201c565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200045d919062000ab1565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051620004dd92919062000b1f565b60405180910390a4620004fc83600089858589620005a560201b60201c565b6200051383600089898989620005ad60201b60201c565b50505050505050565b60606000600167ffffffffffffffff8111156200053e576200053d62000b4c565b5b6040519080825280602002602001820160405280156200056d5781602001602082028036833780820191505090505b509050828160008151811062000588576200058762000b7b565b5b60200260200101818152505080915050919050565b505050505050565b505050505050565b620005d98473ffffffffffffffffffffffffffffffffffffffff16620007a760201b620014641760201c565b156200079f578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016200062295949392919062000c93565b6020604051808303816000875af19250505080156200066157506040513d601f19601f820116820180604052508101906200065e919062000d63565b60015b62000713576200067062000da2565b806308c379a01415620006d457506200068862000dfd565b80620006955750620006d6565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006cb919062000eeb565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200070a9062000f85565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146200079d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000794906200101d565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805482825590600052602060002090810192821562000809579160200282015b8281111562000808578251825591602001919060010190620007eb565b5b509050620008189190620008ad565b5090565b8280546200082a906200106e565b90600052602060002090601f0160209004810192826200084e57600085556200089a565b82601f106200086957805160ff19168380011785556200089a565b828001600101855582156200089a579182015b82811115620008995782518255916020019190600101906200087c565b5b509050620008a99190620008ad565b5090565b5b80821115620008c8576000816000905550600101620008ae565b5090565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200091282620008cc565b91506200091f83620008cc565b925082821015620009355762000934620008d6565b5b828203905092915050565b60006200094d82620008cc565b91506200095a83620008cc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620009965762000995620008d6565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000620009dd82620008cc565b9150620009ea83620008cc565b925082620009fd57620009fc620009a1565b5b828204905092915050565b600082825260208201905092915050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600062000a7760218362000a08565b915062000a848262000a19565b604082019050919050565b6000602082019050818103600083015262000aaa8162000a68565b9050919050565b600062000abe82620008cc565b915062000acb83620008cc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000b035762000b02620008d6565b5b828201905092915050565b62000b1981620008cc565b82525050565b600060408201905062000b36600083018562000b0e565b62000b45602083018462000b0e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000bd78262000baa565b9050919050565b62000be98162000bca565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000c2b57808201518184015260208101905062000c0e565b8381111562000c3b576000848401525b50505050565b6000601f19601f8301169050919050565b600062000c5f8262000bef565b62000c6b818562000bfa565b935062000c7d81856020860162000c0b565b62000c888162000c41565b840191505092915050565b600060a08201905062000caa600083018862000bde565b62000cb9602083018762000bde565b62000cc8604083018662000b0e565b62000cd7606083018562000b0e565b818103608083015262000ceb818462000c52565b90509695505050505050565b6000604051905090565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b62000d3d8162000d06565b811462000d4957600080fd5b50565b60008151905062000d5d8162000d32565b92915050565b60006020828403121562000d7c5762000d7b62000d01565b5b600062000d8c8482850162000d4c565b91505092915050565b60008160e01c9050919050565b600060033d111562000dc45760046000803e62000dc160005162000d95565b90505b90565b62000dd28262000c41565b810181811067ffffffffffffffff8211171562000df45762000df362000b4c565b5b80604052505050565b600060443d101562000e0f5762000e9c565b62000e1962000cf7565b60043d036004823e80513d602482011167ffffffffffffffff8211171562000e4357505062000e9c565b808201805167ffffffffffffffff81111562000e63575050505062000e9c565b80602083010160043d03850181111562000e8257505050505062000e9c565b62000e938260200185018662000dc7565b82955050505050505b90565b600081519050919050565b600062000eb78262000e9f565b62000ec3818562000a08565b935062000ed581856020860162000c0b565b62000ee08162000c41565b840191505092915050565b6000602082019050818103600083015262000f07818462000eaa565b905092915050565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600062000f6d60348362000a08565b915062000f7a8262000f0f565b604082019050919050565b6000602082019050818103600083015262000fa08162000f5e565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006200100560288362000a08565b9150620010128262000fa7565b604082019050919050565b60006020820190508181036000830152620010388162000ff6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200108757607f821691505b602082108114156200109e576200109d6200103f565b5b50919050565b61428d80620010b46000396000f3fe608060405234801561001057600080fd5b50600436106101575760003560e01c80637f14ba3f116100c3578063db4015411161007c578063db401541146103c2578063e985e9c5146103e0578063f242432a14610410578063f2fde38b1461042c578063f5298aca14610448578063f84f7dd01461046457610157565b80637f14ba3f146103025780637f7063e71461031e5780638da5cb5b1461034e578063a22cb4651461036c578063c5cc852414610388578063cdda7715146103a457610157565b80631ef16b43116101155780631ef16b431461024057806321636aa51461025e57806328eece131461027c5780632eb2c2d6146102ac5780634e1273f4146102c8578063715018a6146102f857610157565b8062fdd58e1461015c57806301ffc9a71461018c5780630c89c421146101bc5780630e89341c146101d8578063156e29f614610208578063169bc48614610224575b600080fd5b610176600480360381019061017191906128ee565b610482565b604051610183919061293d565b60405180910390f35b6101a660048036038101906101a191906129b0565b61054b565b6040516101b391906129f8565b60405180910390f35b6101d660048036038101906101d19190612a13565b61062d565b005b6101f260048036038101906101ed9190612a40565b6107bc565b6040516101ff9190612b06565b60405180910390f35b610222600480360381019061021d9190612b28565b610850565b005b61023e600480360381019061023991906128ee565b610944565b005b610248610aa5565b604051610255919061293d565b60405180910390f35b610266610aab565b604051610273919061293d565b60405180910390f35b61029660048036038101906102919190612a13565b610ab1565b6040516102a39190612c39565b60405180910390f35b6102c660048036038101906102c19190612e58565b610c7c565b005b6102e260048036038101906102dd9190612fea565b610d6e565b6040516102ef9190612c39565b60405180910390f35b610300610e87565b005b61031c600480360381019061031791906128ee565b610e9b565b005b61033860048036038101906103339190612a40565b610f98565b604051610345919061293d565b60405180910390f35b610356610fbc565b6040516103639190613071565b60405180910390f35b610386600480360381019061038191906130b8565b610fe6565b005b6103a2600480360381019061039d91906128ee565b610ffc565b005b6103ac6110cf565b6040516103b99190612c39565b60405180910390f35b6103ca6111ca565b6040516103d7919061293d565b60405180910390f35b6103fa60048036038101906103f591906130f8565b6111d0565b60405161040791906129f8565b60405180910390f35b61042a60048036038101906104259190613138565b611264565b005b61044660048036038101906104419190612a13565b61131c565b005b610462600480360381019061045d9190612b28565b6113a0565b005b61046c61145e565b604051610479919061293d565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ea90613241565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061061657507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610626575061062582611487565b5b9050919050565b6106356114f1565b60011515600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600554815260200190815260200160002060009054906101000a900460ff161515146106db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d2906132ad565b60405180910390fd5b60006106e682610ab1565b905060005b81518110156107b65760001515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084848151811061074c5761074b6132cd565b5b6020026020010151815260200190815260200160002060009054906101000a900460ff161515141561077f5750506107b9565b6107a383838381518110610796576107956132cd565b5b602002602001015161156f565b80806107ae9061332b565b9150506106eb565b50505b50565b6060600280546107cb906133a3565b80601f01602080910402602001604051908101604052809291908181526020018280546107f7906133a3565b80156108445780601f1061081957610100808354040283529160200191610844565b820191906000526020600020905b81548152906001019060200180831161082757829003601f168201915b50505050509050919050565b6108586114f1565b60011515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600554815260200190815260200160002060009054906101000a900460ff161515146108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f590613421565b60405180910390fd5b61093f8383836040518060400160405280600481526020017f3078303000000000000000000000000000000000000000000000000000000000815250611624565b505050565b61094c6114f1565b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600554815260200190815260200160002060009054906101000a900460ff161515146109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e99061348d565b60405180910390fd5b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151415610a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8e9061351f565b60405180910390fd5b610aa182826117d5565b5050565b60075481565b60055481565b606060011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600554815260200190815260200160002060009054906101000a900460ff16151514610b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5090613421565b60405180910390fd5b600060098054905067ffffffffffffffff811115610b7a57610b79612c60565b5b604051908082528060200260200182016040528015610ba85781602001602082028036833780820191505090505b5090506000600190506000600190505b600980549050811015610c715760011515600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151415610c5e5780838381518110610c4357610c426132cd565b5b6020026020010181815250508180610c5a9061332b565b9250505b8080610c699061332b565b915050610bb8565b508192505050919050565b60005b8351811015610d595760011515600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868481518110610ce057610cdf6132cd565b5b6020026020010151815260200190815260200160002060009054906101000a900460ff16151514610d46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3d906135d7565b60405180910390fd5b8080610d519061332b565b915050610c7f565b50610d67858585858561188a565b5050505050565b60608151835114610db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dab90613669565b60405180910390fd5b6000835167ffffffffffffffff811115610dd157610dd0612c60565b5b604051908082528060200260200182016040528015610dff5781602001602082028036833780820191505090505b50905060005b8451811015610e7c57610e4c858281518110610e2457610e236132cd565b5b6020026020010151858381518110610e3f57610e3e6132cd565b5b6020026020010151610482565b828281518110610e5f57610e5e6132cd565b5b60200260200101818152505080610e759061332b565b9050610e05565b508091505092915050565b610e8f6114f1565b610e99600061192b565b565b610ea36114f1565b60008111610ee6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edd906136fb565b60405180910390fd5b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151514610f8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f819061378d565b60405180910390fd5b610f94828261156f565b5050565b60098181548110610fa857600080fd5b906000526020600020016000915090505481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610ff8610ff16119f1565b83836119f9565b5050565b6110046114f1565b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600554815260200190815260200160002060009054906101000a900460ff16151514156110ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a2906137f9565b60405180910390fd5b6110b7826005546117d5565b60055481146110cb576110ca82826117d5565b5b5050565b6060600060016009805490506110e59190613819565b67ffffffffffffffff8111156110fe576110fd612c60565b5b60405190808252806020026020018201604052801561112c5781602001602082028036833780820191505090505b5090506000805b600f8054905081101561119f57600f8181548110611154576111536132cd565b5b9060005260206000200154838281518110611172576111716132cd565b5b60200260200101818152505081806111899061332b565b92505080806111979061332b565b915050611133565b50600a548282815181106111b6576111b56132cd565b5b602002602001018181525050819250505090565b60065481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60011515600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff16151514611308576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ff90613907565b60405180910390fd5b6113158585858585611b66565b5050505050565b6113246114f1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138b90613999565b60405180910390fd5b61139d8161192b565b50565b6113a86114f1565b60011515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600554815260200190815260200160002060009054906101000a900460ff1615151461144e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144590613421565b60405180910390fd5b611459838383611c07565b505050565b60085481565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6114f96119f1565b73ffffffffffffffffffffffffffffffffffffffff16611517610fbc565b73ffffffffffffffffffffffffffffffffffffffff161461156d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156490613a05565b60405180910390fd5b565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff02191690831515021790555060001515818373ffffffffffffffffffffffffffffffffffffffff167fb1838829a17d2860e6e86b6817310df2d1cc8e52f7232a66f9b3787b8f281a4860405160405180910390a45050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611694576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168b90613a97565b60405180910390fd5b600061169e6119f1565b905060006116ab85611e4e565b905060006116b885611e4e565b90506116c983600089858589611ec8565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117289190613819565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516117a6929190613ab7565b60405180910390a46117bd83600089858589611ed0565b6117cc83600089898989611ed8565b50505050505050565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff02191690831515021790555060011515818373ffffffffffffffffffffffffffffffffffffffff167fb1838829a17d2860e6e86b6817310df2d1cc8e52f7232a66f9b3787b8f281a4860405160405180910390a45050565b6118926119f1565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806118d857506118d7856118d26119f1565b6111d0565b5b611917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190e90613b52565b60405180910390fd5b61192485858585856120b0565b5050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611a68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5f90613be4565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b5991906129f8565b60405180910390a3505050565b611b6e6119f1565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611bb45750611bb385611bae6119f1565b6111d0565b5b611bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bea90613b52565b60405180910390fd5b611c0085858585856123d2565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6e90613c76565b60405180910390fd5b6000611c816119f1565b90506000611c8e84611e4e565b90506000611c9b84611e4e565b9050611cbb83876000858560405180602001604052806000815250611ec8565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905084811015611d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4990613d08565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611e1f929190613ab7565b60405180910390a4611e4584886000868660405180602001604052806000815250611ed0565b50505050505050565b60606000600167ffffffffffffffff811115611e6d57611e6c612c60565b5b604051908082528060200260200182016040528015611e9b5781602001602082028036833780820191505090505b5090508281600081518110611eb357611eb26132cd565b5b60200260200101818152505080915050919050565b505050505050565b505050505050565b611ef78473ffffffffffffffffffffffffffffffffffffffff16611464565b156120a8578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611f3d959493929190613d7d565b6020604051808303816000875af1925050508015611f7957506040513d601f19601f82011682018060405250810190611f769190613dec565b60015b61201f57611f85613e26565b806308c379a01415611fe25750611f9a613e48565b80611fa55750611fe4565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd99190612b06565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201690613f50565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146120a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209d90613fe2565b60405180910390fd5b505b505050505050565b81518351146120f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120eb90614074565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215b90614106565b60405180910390fd5b600061216e6119f1565b905061217e818787878787611ec8565b60005b845181101561232f57600085828151811061219f5761219e6132cd565b5b6020026020010151905060008583815181106121be576121bd6132cd565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561225f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225690614198565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123149190613819565b92505081905550505050806123289061332b565b9050612181565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516123a69291906141b8565b60405180910390a46123bc818787878787611ed0565b6123ca81878787878761266e565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243990614106565b60405180910390fd5b600061244c6119f1565b9050600061245985611e4e565b9050600061246685611e4e565b9050612476838989858589611ec8565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508581101561250d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250490614198565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125c29190613819565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161263f929190613ab7565b60405180910390a4612655848a8a86868a611ed0565b612663848a8a8a8a8a611ed8565b505050505050505050565b61268d8473ffffffffffffffffffffffffffffffffffffffff16611464565b1561283e578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016126d39594939291906141ef565b6020604051808303816000875af192505050801561270f57506040513d601f19601f8201168201806040525081019061270c9190613dec565b60015b6127b55761271b613e26565b806308c379a014156127785750612730613e48565b8061273b575061277a565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276f9190612b06565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127ac90613f50565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461283c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283390613fe2565b60405180910390fd5b505b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006128858261285a565b9050919050565b6128958161287a565b81146128a057600080fd5b50565b6000813590506128b28161288c565b92915050565b6000819050919050565b6128cb816128b8565b81146128d657600080fd5b50565b6000813590506128e8816128c2565b92915050565b6000806040838503121561290557612904612850565b5b6000612913858286016128a3565b9250506020612924858286016128d9565b9150509250929050565b612937816128b8565b82525050565b6000602082019050612952600083018461292e565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61298d81612958565b811461299857600080fd5b50565b6000813590506129aa81612984565b92915050565b6000602082840312156129c6576129c5612850565b5b60006129d48482850161299b565b91505092915050565b60008115159050919050565b6129f2816129dd565b82525050565b6000602082019050612a0d60008301846129e9565b92915050565b600060208284031215612a2957612a28612850565b5b6000612a37848285016128a3565b91505092915050565b600060208284031215612a5657612a55612850565b5b6000612a64848285016128d9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612aa7578082015181840152602081019050612a8c565b83811115612ab6576000848401525b50505050565b6000601f19601f8301169050919050565b6000612ad882612a6d565b612ae28185612a78565b9350612af2818560208601612a89565b612afb81612abc565b840191505092915050565b60006020820190508181036000830152612b208184612acd565b905092915050565b600080600060608486031215612b4157612b40612850565b5b6000612b4f868287016128a3565b9350506020612b60868287016128d9565b9250506040612b71868287016128d9565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612bb0816128b8565b82525050565b6000612bc28383612ba7565b60208301905092915050565b6000602082019050919050565b6000612be682612b7b565b612bf08185612b86565b9350612bfb83612b97565b8060005b83811015612c2c578151612c138882612bb6565b9750612c1e83612bce565b925050600181019050612bff565b5085935050505092915050565b60006020820190508181036000830152612c538184612bdb565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612c9882612abc565b810181811067ffffffffffffffff82111715612cb757612cb6612c60565b5b80604052505050565b6000612cca612846565b9050612cd68282612c8f565b919050565b600067ffffffffffffffff821115612cf657612cf5612c60565b5b602082029050602081019050919050565b600080fd5b6000612d1f612d1a84612cdb565b612cc0565b90508083825260208201905060208402830185811115612d4257612d41612d07565b5b835b81811015612d6b5780612d5788826128d9565b845260208401935050602081019050612d44565b5050509392505050565b600082601f830112612d8a57612d89612c5b565b5b8135612d9a848260208601612d0c565b91505092915050565b600080fd5b600067ffffffffffffffff821115612dc357612dc2612c60565b5b612dcc82612abc565b9050602081019050919050565b82818337600083830152505050565b6000612dfb612df684612da8565b612cc0565b905082815260208101848484011115612e1757612e16612da3565b5b612e22848285612dd9565b509392505050565b600082601f830112612e3f57612e3e612c5b565b5b8135612e4f848260208601612de8565b91505092915050565b600080600080600060a08688031215612e7457612e73612850565b5b6000612e82888289016128a3565b9550506020612e93888289016128a3565b945050604086013567ffffffffffffffff811115612eb457612eb3612855565b5b612ec088828901612d75565b935050606086013567ffffffffffffffff811115612ee157612ee0612855565b5b612eed88828901612d75565b925050608086013567ffffffffffffffff811115612f0e57612f0d612855565b5b612f1a88828901612e2a565b9150509295509295909350565b600067ffffffffffffffff821115612f4257612f41612c60565b5b602082029050602081019050919050565b6000612f66612f6184612f27565b612cc0565b90508083825260208201905060208402830185811115612f8957612f88612d07565b5b835b81811015612fb25780612f9e88826128a3565b845260208401935050602081019050612f8b565b5050509392505050565b600082601f830112612fd157612fd0612c5b565b5b8135612fe1848260208601612f53565b91505092915050565b6000806040838503121561300157613000612850565b5b600083013567ffffffffffffffff81111561301f5761301e612855565b5b61302b85828601612fbc565b925050602083013567ffffffffffffffff81111561304c5761304b612855565b5b61305885828601612d75565b9150509250929050565b61306b8161287a565b82525050565b60006020820190506130866000830184613062565b92915050565b613095816129dd565b81146130a057600080fd5b50565b6000813590506130b28161308c565b92915050565b600080604083850312156130cf576130ce612850565b5b60006130dd858286016128a3565b92505060206130ee858286016130a3565b9150509250929050565b6000806040838503121561310f5761310e612850565b5b600061311d858286016128a3565b925050602061312e858286016128a3565b9150509250929050565b600080600080600060a0868803121561315457613153612850565b5b6000613162888289016128a3565b9550506020613173888289016128a3565b9450506040613184888289016128d9565b9350506060613195888289016128d9565b925050608086013567ffffffffffffffff8111156131b6576131b5612855565b5b6131c288828901612e2a565b9150509295509295909350565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b600061322b602a83612a78565b9150613236826131cf565b604082019050919050565b6000602082019050818103600083015261325a8161321e565b9050919050565b7f61646472657373206e6f74206164646564000000000000000000000000000000600082015250565b6000613297601183612a78565b91506132a282613261565b602082019050919050565b600060208201905081810360008301526132c68161328a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613336826128b8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613369576133686132fc565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806133bb57607f821691505b602082108114156133cf576133ce613374565b5b50919050565b7f6f7267616e697a6174696f6e206e6f7420616464656400000000000000000000600082015250565b600061340b601683612a78565b9150613416826133d5565b602082019050919050565b6000602082019050818103600083015261343a816133fe565b9050919050565b7f506c6561736520616464206f7267616e697a6174696f6e206669727374000000600082015250565b6000613477601d83612a78565b915061348282613441565b602082019050919050565b600060208201905081810360008301526134a68161346a565b9050919050565b7f6172656120616c72656164792073657420666f722074686973206f7267616e6960008201527f7a6174696f6e0000000000000000000000000000000000000000000000000000602082015250565b6000613509602683612a78565b9150613514826134ad565b604082019050919050565b60006020820190508181036000830152613538816134fc565b9050919050565b7f74686973206f7267616e697a6174696f6e20646f6573206e6f7420686176652060008201527f7065726d697373696f6e20746f20726563656976652070617274206f6620746860208201527f6520626174636800000000000000000000000000000000000000000000000000604082015250565b60006135c1604783612a78565b91506135cc8261353f565b606082019050919050565b600060208201905081810360008301526135f0816135b4565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000613653602983612a78565b915061365e826135f7565b604082019050919050565b6000602082019050818103600083015261368281613646565b9050919050565b7f746f206578636c756465206163636f756e7420616c746f67657468657220757360008201527f65207375624f7267206d6574686f640000000000000000000000000000000000602082015250565b60006136e5602f83612a78565b91506136f082613689565b604082019050919050565b60006020820190508181036000830152613714816136d8565b9050919050565b7f74686973206163636f756e74206973206e6f742072656769737465726564207460008201527f6f20746865206172656120737065636966696564000000000000000000000000602082015250565b6000613777603483612a78565b91506137828261371b565b604082019050919050565b600060208201905081810360008301526137a68161376a565b9050919050565b7f6164647265737320616c72656164792061646465640000000000000000000000600082015250565b60006137e3601583612a78565b91506137ee826137ad565b602082019050919050565b60006020820190508181036000830152613812816137d6565b9050919050565b6000613824826128b8565b915061382f836128b8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613864576138636132fc565b5b828201905092915050565b7f74686973206f7267616e697a6174696f6e20646f6573206e6f7420686176652060008201527f7065726d697373696f6e20746f2072656365697665207468697320627564676560208201527f7400000000000000000000000000000000000000000000000000000000000000604082015250565b60006138f1604183612a78565b91506138fc8261386f565b606082019050919050565b60006020820190508181036000830152613920816138e4565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613983602683612a78565b915061398e82613927565b604082019050919050565b600060208201905081810360008301526139b281613976565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006139ef602083612a78565b91506139fa826139b9565b602082019050919050565b60006020820190508181036000830152613a1e816139e2565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613a81602183612a78565b9150613a8c82613a25565b604082019050919050565b60006020820190508181036000830152613ab081613a74565b9050919050565b6000604082019050613acc600083018561292e565b613ad9602083018461292e565b9392505050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613b3c602e83612a78565b9150613b4782613ae0565b604082019050919050565b60006020820190508181036000830152613b6b81613b2f565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000613bce602983612a78565b9150613bd982613b72565b604082019050919050565b60006020820190508181036000830152613bfd81613bc1565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000613c60602383612a78565b9150613c6b82613c04565b604082019050919050565b60006020820190508181036000830152613c8f81613c53565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000613cf2602483612a78565b9150613cfd82613c96565b604082019050919050565b60006020820190508181036000830152613d2181613ce5565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613d4f82613d28565b613d598185613d33565b9350613d69818560208601612a89565b613d7281612abc565b840191505092915050565b600060a082019050613d926000830188613062565b613d9f6020830187613062565b613dac604083018661292e565b613db9606083018561292e565b8181036080830152613dcb8184613d44565b90509695505050505050565b600081519050613de681612984565b92915050565b600060208284031215613e0257613e01612850565b5b6000613e1084828501613dd7565b91505092915050565b60008160e01c9050919050565b600060033d1115613e455760046000803e613e42600051613e19565b90505b90565b600060443d1015613e5857613edb565b613e60612846565b60043d036004823e80513d602482011167ffffffffffffffff82111715613e88575050613edb565b808201805167ffffffffffffffff811115613ea65750505050613edb565b80602083010160043d038501811115613ec3575050505050613edb565b613ed282602001850186612c8f565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000613f3a603483612a78565b9150613f4582613ede565b604082019050919050565b60006020820190508181036000830152613f6981613f2d565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000613fcc602883612a78565b9150613fd782613f70565b604082019050919050565b60006020820190508181036000830152613ffb81613fbf565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061405e602883612a78565b915061406982614002565b604082019050919050565b6000602082019050818103600083015261408d81614051565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006140f0602583612a78565b91506140fb82614094565b604082019050919050565b6000602082019050818103600083015261411f816140e3565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000614182602a83612a78565b915061418d82614126565b604082019050919050565b600060208201905081810360008301526141b181614175565b9050919050565b600060408201905081810360008301526141d28185612bdb565b905081810360208301526141e68184612bdb565b90509392505050565b600060a0820190506142046000830188613062565b6142116020830187613062565b81810360408301526142238186612bdb565b905081810360608301526142378185612bdb565b9050818103608083015261424b8184613d44565b9050969550505050505056fea2646970667358221220187b0a7deb46762f02d9b09f404969b5df52d85087ac96c874a2b4b782f421ae64736f6c634300080a003368747470733a2f2f636f6e736f6c652e66696c65626173652e636f6d2f6275636b6574732f6170702d6f7263616d656e746f2f7b617265617d2e6a736f6e",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101575760003560e01c80637f14ba3f116100c3578063db4015411161007c578063db401541146103c2578063e985e9c5146103e0578063f242432a14610410578063f2fde38b1461042c578063f5298aca14610448578063f84f7dd01461046457610157565b80637f14ba3f146103025780637f7063e71461031e5780638da5cb5b1461034e578063a22cb4651461036c578063c5cc852414610388578063cdda7715146103a457610157565b80631ef16b43116101155780631ef16b431461024057806321636aa51461025e57806328eece131461027c5780632eb2c2d6146102ac5780634e1273f4146102c8578063715018a6146102f857610157565b8062fdd58e1461015c57806301ffc9a71461018c5780630c89c421146101bc5780630e89341c146101d8578063156e29f614610208578063169bc48614610224575b600080fd5b610176600480360381019061017191906128ee565b610482565b604051610183919061293d565b60405180910390f35b6101a660048036038101906101a191906129b0565b61054b565b6040516101b391906129f8565b60405180910390f35b6101d660048036038101906101d19190612a13565b61062d565b005b6101f260048036038101906101ed9190612a40565b6107bc565b6040516101ff9190612b06565b60405180910390f35b610222600480360381019061021d9190612b28565b610850565b005b61023e600480360381019061023991906128ee565b610944565b005b610248610aa5565b604051610255919061293d565b60405180910390f35b610266610aab565b604051610273919061293d565b60405180910390f35b61029660048036038101906102919190612a13565b610ab1565b6040516102a39190612c39565b60405180910390f35b6102c660048036038101906102c19190612e58565b610c7c565b005b6102e260048036038101906102dd9190612fea565b610d6e565b6040516102ef9190612c39565b60405180910390f35b610300610e87565b005b61031c600480360381019061031791906128ee565b610e9b565b005b61033860048036038101906103339190612a40565b610f98565b604051610345919061293d565b60405180910390f35b610356610fbc565b6040516103639190613071565b60405180910390f35b610386600480360381019061038191906130b8565b610fe6565b005b6103a2600480360381019061039d91906128ee565b610ffc565b005b6103ac6110cf565b6040516103b99190612c39565b60405180910390f35b6103ca6111ca565b6040516103d7919061293d565b60405180910390f35b6103fa60048036038101906103f591906130f8565b6111d0565b60405161040791906129f8565b60405180910390f35b61042a60048036038101906104259190613138565b611264565b005b61044660048036038101906104419190612a13565b61131c565b005b610462600480360381019061045d9190612b28565b6113a0565b005b61046c61145e565b604051610479919061293d565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ea90613241565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061061657507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610626575061062582611487565b5b9050919050565b6106356114f1565b60011515600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600554815260200190815260200160002060009054906101000a900460ff161515146106db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d2906132ad565b60405180910390fd5b60006106e682610ab1565b905060005b81518110156107b65760001515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084848151811061074c5761074b6132cd565b5b6020026020010151815260200190815260200160002060009054906101000a900460ff161515141561077f5750506107b9565b6107a383838381518110610796576107956132cd565b5b602002602001015161156f565b80806107ae9061332b565b9150506106eb565b50505b50565b6060600280546107cb906133a3565b80601f01602080910402602001604051908101604052809291908181526020018280546107f7906133a3565b80156108445780601f1061081957610100808354040283529160200191610844565b820191906000526020600020905b81548152906001019060200180831161082757829003601f168201915b50505050509050919050565b6108586114f1565b60011515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600554815260200190815260200160002060009054906101000a900460ff161515146108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f590613421565b60405180910390fd5b61093f8383836040518060400160405280600481526020017f3078303000000000000000000000000000000000000000000000000000000000815250611624565b505050565b61094c6114f1565b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600554815260200190815260200160002060009054906101000a900460ff161515146109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e99061348d565b60405180910390fd5b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151415610a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8e9061351f565b60405180910390fd5b610aa182826117d5565b5050565b60075481565b60055481565b606060011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600554815260200190815260200160002060009054906101000a900460ff16151514610b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5090613421565b60405180910390fd5b600060098054905067ffffffffffffffff811115610b7a57610b79612c60565b5b604051908082528060200260200182016040528015610ba85781602001602082028036833780820191505090505b5090506000600190506000600190505b600980549050811015610c715760011515600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151415610c5e5780838381518110610c4357610c426132cd565b5b6020026020010181815250508180610c5a9061332b565b9250505b8080610c699061332b565b915050610bb8565b508192505050919050565b60005b8351811015610d595760011515600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868481518110610ce057610cdf6132cd565b5b6020026020010151815260200190815260200160002060009054906101000a900460ff16151514610d46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3d906135d7565b60405180910390fd5b8080610d519061332b565b915050610c7f565b50610d67858585858561188a565b5050505050565b60608151835114610db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dab90613669565b60405180910390fd5b6000835167ffffffffffffffff811115610dd157610dd0612c60565b5b604051908082528060200260200182016040528015610dff5781602001602082028036833780820191505090505b50905060005b8451811015610e7c57610e4c858281518110610e2457610e236132cd565b5b6020026020010151858381518110610e3f57610e3e6132cd565b5b6020026020010151610482565b828281518110610e5f57610e5e6132cd565b5b60200260200101818152505080610e759061332b565b9050610e05565b508091505092915050565b610e8f6114f1565b610e99600061192b565b565b610ea36114f1565b60008111610ee6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edd906136fb565b60405180910390fd5b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151514610f8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f819061378d565b60405180910390fd5b610f94828261156f565b5050565b60098181548110610fa857600080fd5b906000526020600020016000915090505481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610ff8610ff16119f1565b83836119f9565b5050565b6110046114f1565b60011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600554815260200190815260200160002060009054906101000a900460ff16151514156110ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a2906137f9565b60405180910390fd5b6110b7826005546117d5565b60055481146110cb576110ca82826117d5565b5b5050565b6060600060016009805490506110e59190613819565b67ffffffffffffffff8111156110fe576110fd612c60565b5b60405190808252806020026020018201604052801561112c5781602001602082028036833780820191505090505b5090506000805b600f8054905081101561119f57600f8181548110611154576111536132cd565b5b9060005260206000200154838281518110611172576111716132cd565b5b60200260200101818152505081806111899061332b565b92505080806111979061332b565b915050611133565b50600a548282815181106111b6576111b56132cd565b5b602002602001018181525050819250505090565b60065481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60011515600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff16151514611308576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ff90613907565b60405180910390fd5b6113158585858585611b66565b5050505050565b6113246114f1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138b90613999565b60405180910390fd5b61139d8161192b565b50565b6113a86114f1565b60011515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600554815260200190815260200160002060009054906101000a900460ff1615151461144e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144590613421565b60405180910390fd5b611459838383611c07565b505050565b60085481565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6114f96119f1565b73ffffffffffffffffffffffffffffffffffffffff16611517610fbc565b73ffffffffffffffffffffffffffffffffffffffff161461156d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156490613a05565b60405180910390fd5b565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff02191690831515021790555060001515818373ffffffffffffffffffffffffffffffffffffffff167fb1838829a17d2860e6e86b6817310df2d1cc8e52f7232a66f9b3787b8f281a4860405160405180910390a45050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611694576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168b90613a97565b60405180910390fd5b600061169e6119f1565b905060006116ab85611e4e565b905060006116b885611e4e565b90506116c983600089858589611ec8565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117289190613819565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516117a6929190613ab7565b60405180910390a46117bd83600089858589611ed0565b6117cc83600089898989611ed8565b50505050505050565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff02191690831515021790555060011515818373ffffffffffffffffffffffffffffffffffffffff167fb1838829a17d2860e6e86b6817310df2d1cc8e52f7232a66f9b3787b8f281a4860405160405180910390a45050565b6118926119f1565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806118d857506118d7856118d26119f1565b6111d0565b5b611917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190e90613b52565b60405180910390fd5b61192485858585856120b0565b5050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611a68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5f90613be4565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b5991906129f8565b60405180910390a3505050565b611b6e6119f1565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611bb45750611bb385611bae6119f1565b6111d0565b5b611bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bea90613b52565b60405180910390fd5b611c0085858585856123d2565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6e90613c76565b60405180910390fd5b6000611c816119f1565b90506000611c8e84611e4e565b90506000611c9b84611e4e565b9050611cbb83876000858560405180602001604052806000815250611ec8565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905084811015611d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4990613d08565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611e1f929190613ab7565b60405180910390a4611e4584886000868660405180602001604052806000815250611ed0565b50505050505050565b60606000600167ffffffffffffffff811115611e6d57611e6c612c60565b5b604051908082528060200260200182016040528015611e9b5781602001602082028036833780820191505090505b5090508281600081518110611eb357611eb26132cd565b5b60200260200101818152505080915050919050565b505050505050565b505050505050565b611ef78473ffffffffffffffffffffffffffffffffffffffff16611464565b156120a8578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611f3d959493929190613d7d565b6020604051808303816000875af1925050508015611f7957506040513d601f19601f82011682018060405250810190611f769190613dec565b60015b61201f57611f85613e26565b806308c379a01415611fe25750611f9a613e48565b80611fa55750611fe4565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd99190612b06565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201690613f50565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146120a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209d90613fe2565b60405180910390fd5b505b505050505050565b81518351146120f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120eb90614074565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215b90614106565b60405180910390fd5b600061216e6119f1565b905061217e818787878787611ec8565b60005b845181101561232f57600085828151811061219f5761219e6132cd565b5b6020026020010151905060008583815181106121be576121bd6132cd565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561225f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225690614198565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123149190613819565b92505081905550505050806123289061332b565b9050612181565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516123a69291906141b8565b60405180910390a46123bc818787878787611ed0565b6123ca81878787878761266e565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243990614106565b60405180910390fd5b600061244c6119f1565b9050600061245985611e4e565b9050600061246685611e4e565b9050612476838989858589611ec8565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508581101561250d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250490614198565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125c29190613819565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161263f929190613ab7565b60405180910390a4612655848a8a86868a611ed0565b612663848a8a8a8a8a611ed8565b505050505050505050565b61268d8473ffffffffffffffffffffffffffffffffffffffff16611464565b1561283e578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016126d39594939291906141ef565b6020604051808303816000875af192505050801561270f57506040513d601f19601f8201168201806040525081019061270c9190613dec565b60015b6127b55761271b613e26565b806308c379a014156127785750612730613e48565b8061273b575061277a565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276f9190612b06565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127ac90613f50565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461283c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283390613fe2565b60405180910390fd5b505b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006128858261285a565b9050919050565b6128958161287a565b81146128a057600080fd5b50565b6000813590506128b28161288c565b92915050565b6000819050919050565b6128cb816128b8565b81146128d657600080fd5b50565b6000813590506128e8816128c2565b92915050565b6000806040838503121561290557612904612850565b5b6000612913858286016128a3565b9250506020612924858286016128d9565b9150509250929050565b612937816128b8565b82525050565b6000602082019050612952600083018461292e565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61298d81612958565b811461299857600080fd5b50565b6000813590506129aa81612984565b92915050565b6000602082840312156129c6576129c5612850565b5b60006129d48482850161299b565b91505092915050565b60008115159050919050565b6129f2816129dd565b82525050565b6000602082019050612a0d60008301846129e9565b92915050565b600060208284031215612a2957612a28612850565b5b6000612a37848285016128a3565b91505092915050565b600060208284031215612a5657612a55612850565b5b6000612a64848285016128d9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612aa7578082015181840152602081019050612a8c565b83811115612ab6576000848401525b50505050565b6000601f19601f8301169050919050565b6000612ad882612a6d565b612ae28185612a78565b9350612af2818560208601612a89565b612afb81612abc565b840191505092915050565b60006020820190508181036000830152612b208184612acd565b905092915050565b600080600060608486031215612b4157612b40612850565b5b6000612b4f868287016128a3565b9350506020612b60868287016128d9565b9250506040612b71868287016128d9565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612bb0816128b8565b82525050565b6000612bc28383612ba7565b60208301905092915050565b6000602082019050919050565b6000612be682612b7b565b612bf08185612b86565b9350612bfb83612b97565b8060005b83811015612c2c578151612c138882612bb6565b9750612c1e83612bce565b925050600181019050612bff565b5085935050505092915050565b60006020820190508181036000830152612c538184612bdb565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612c9882612abc565b810181811067ffffffffffffffff82111715612cb757612cb6612c60565b5b80604052505050565b6000612cca612846565b9050612cd68282612c8f565b919050565b600067ffffffffffffffff821115612cf657612cf5612c60565b5b602082029050602081019050919050565b600080fd5b6000612d1f612d1a84612cdb565b612cc0565b90508083825260208201905060208402830185811115612d4257612d41612d07565b5b835b81811015612d6b5780612d5788826128d9565b845260208401935050602081019050612d44565b5050509392505050565b600082601f830112612d8a57612d89612c5b565b5b8135612d9a848260208601612d0c565b91505092915050565b600080fd5b600067ffffffffffffffff821115612dc357612dc2612c60565b5b612dcc82612abc565b9050602081019050919050565b82818337600083830152505050565b6000612dfb612df684612da8565b612cc0565b905082815260208101848484011115612e1757612e16612da3565b5b612e22848285612dd9565b509392505050565b600082601f830112612e3f57612e3e612c5b565b5b8135612e4f848260208601612de8565b91505092915050565b600080600080600060a08688031215612e7457612e73612850565b5b6000612e82888289016128a3565b9550506020612e93888289016128a3565b945050604086013567ffffffffffffffff811115612eb457612eb3612855565b5b612ec088828901612d75565b935050606086013567ffffffffffffffff811115612ee157612ee0612855565b5b612eed88828901612d75565b925050608086013567ffffffffffffffff811115612f0e57612f0d612855565b5b612f1a88828901612e2a565b9150509295509295909350565b600067ffffffffffffffff821115612f4257612f41612c60565b5b602082029050602081019050919050565b6000612f66612f6184612f27565b612cc0565b90508083825260208201905060208402830185811115612f8957612f88612d07565b5b835b81811015612fb25780612f9e88826128a3565b845260208401935050602081019050612f8b565b5050509392505050565b600082601f830112612fd157612fd0612c5b565b5b8135612fe1848260208601612f53565b91505092915050565b6000806040838503121561300157613000612850565b5b600083013567ffffffffffffffff81111561301f5761301e612855565b5b61302b85828601612fbc565b925050602083013567ffffffffffffffff81111561304c5761304b612855565b5b61305885828601612d75565b9150509250929050565b61306b8161287a565b82525050565b60006020820190506130866000830184613062565b92915050565b613095816129dd565b81146130a057600080fd5b50565b6000813590506130b28161308c565b92915050565b600080604083850312156130cf576130ce612850565b5b60006130dd858286016128a3565b92505060206130ee858286016130a3565b9150509250929050565b6000806040838503121561310f5761310e612850565b5b600061311d858286016128a3565b925050602061312e858286016128a3565b9150509250929050565b600080600080600060a0868803121561315457613153612850565b5b6000613162888289016128a3565b9550506020613173888289016128a3565b9450506040613184888289016128d9565b9350506060613195888289016128d9565b925050608086013567ffffffffffffffff8111156131b6576131b5612855565b5b6131c288828901612e2a565b9150509295509295909350565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b600061322b602a83612a78565b9150613236826131cf565b604082019050919050565b6000602082019050818103600083015261325a8161321e565b9050919050565b7f61646472657373206e6f74206164646564000000000000000000000000000000600082015250565b6000613297601183612a78565b91506132a282613261565b602082019050919050565b600060208201905081810360008301526132c68161328a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613336826128b8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613369576133686132fc565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806133bb57607f821691505b602082108114156133cf576133ce613374565b5b50919050565b7f6f7267616e697a6174696f6e206e6f7420616464656400000000000000000000600082015250565b600061340b601683612a78565b9150613416826133d5565b602082019050919050565b6000602082019050818103600083015261343a816133fe565b9050919050565b7f506c6561736520616464206f7267616e697a6174696f6e206669727374000000600082015250565b6000613477601d83612a78565b915061348282613441565b602082019050919050565b600060208201905081810360008301526134a68161346a565b9050919050565b7f6172656120616c72656164792073657420666f722074686973206f7267616e6960008201527f7a6174696f6e0000000000000000000000000000000000000000000000000000602082015250565b6000613509602683612a78565b9150613514826134ad565b604082019050919050565b60006020820190508181036000830152613538816134fc565b9050919050565b7f74686973206f7267616e697a6174696f6e20646f6573206e6f7420686176652060008201527f7065726d697373696f6e20746f20726563656976652070617274206f6620746860208201527f6520626174636800000000000000000000000000000000000000000000000000604082015250565b60006135c1604783612a78565b91506135cc8261353f565b606082019050919050565b600060208201905081810360008301526135f0816135b4565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000613653602983612a78565b915061365e826135f7565b604082019050919050565b6000602082019050818103600083015261368281613646565b9050919050565b7f746f206578636c756465206163636f756e7420616c746f67657468657220757360008201527f65207375624f7267206d6574686f640000000000000000000000000000000000602082015250565b60006136e5602f83612a78565b91506136f082613689565b604082019050919050565b60006020820190508181036000830152613714816136d8565b9050919050565b7f74686973206163636f756e74206973206e6f742072656769737465726564207460008201527f6f20746865206172656120737065636966696564000000000000000000000000602082015250565b6000613777603483612a78565b91506137828261371b565b604082019050919050565b600060208201905081810360008301526137a68161376a565b9050919050565b7f6164647265737320616c72656164792061646465640000000000000000000000600082015250565b60006137e3601583612a78565b91506137ee826137ad565b602082019050919050565b60006020820190508181036000830152613812816137d6565b9050919050565b6000613824826128b8565b915061382f836128b8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613864576138636132fc565b5b828201905092915050565b7f74686973206f7267616e697a6174696f6e20646f6573206e6f7420686176652060008201527f7065726d697373696f6e20746f2072656365697665207468697320627564676560208201527f7400000000000000000000000000000000000000000000000000000000000000604082015250565b60006138f1604183612a78565b91506138fc8261386f565b606082019050919050565b60006020820190508181036000830152613920816138e4565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613983602683612a78565b915061398e82613927565b604082019050919050565b600060208201905081810360008301526139b281613976565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006139ef602083612a78565b91506139fa826139b9565b602082019050919050565b60006020820190508181036000830152613a1e816139e2565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613a81602183612a78565b9150613a8c82613a25565b604082019050919050565b60006020820190508181036000830152613ab081613a74565b9050919050565b6000604082019050613acc600083018561292e565b613ad9602083018461292e565b9392505050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613b3c602e83612a78565b9150613b4782613ae0565b604082019050919050565b60006020820190508181036000830152613b6b81613b2f565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000613bce602983612a78565b9150613bd982613b72565b604082019050919050565b60006020820190508181036000830152613bfd81613bc1565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000613c60602383612a78565b9150613c6b82613c04565b604082019050919050565b60006020820190508181036000830152613c8f81613c53565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000613cf2602483612a78565b9150613cfd82613c96565b604082019050919050565b60006020820190508181036000830152613d2181613ce5565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613d4f82613d28565b613d598185613d33565b9350613d69818560208601612a89565b613d7281612abc565b840191505092915050565b600060a082019050613d926000830188613062565b613d9f6020830187613062565b613dac604083018661292e565b613db9606083018561292e565b8181036080830152613dcb8184613d44565b90509695505050505050565b600081519050613de681612984565b92915050565b600060208284031215613e0257613e01612850565b5b6000613e1084828501613dd7565b91505092915050565b60008160e01c9050919050565b600060033d1115613e455760046000803e613e42600051613e19565b90505b90565b600060443d1015613e5857613edb565b613e60612846565b60043d036004823e80513d602482011167ffffffffffffffff82111715613e88575050613edb565b808201805167ffffffffffffffff811115613ea65750505050613edb565b80602083010160043d038501811115613ec3575050505050613edb565b613ed282602001850186612c8f565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000613f3a603483612a78565b9150613f4582613ede565b604082019050919050565b60006020820190508181036000830152613f6981613f2d565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000613fcc602883612a78565b9150613fd782613f70565b604082019050919050565b60006020820190508181036000830152613ffb81613fbf565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061405e602883612a78565b915061406982614002565b604082019050919050565b6000602082019050818103600083015261408d81614051565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006140f0602583612a78565b91506140fb82614094565b604082019050919050565b6000602082019050818103600083015261411f816140e3565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000614182602a83612a78565b915061418d82614126565b604082019050919050565b600060208201905081810360008301526141b181614175565b9050919050565b600060408201905081810360008301526141d28185612bdb565b905081810360208301526141e68184612bdb565b90509392505050565b600060a0820190506142046000830188613062565b6142116020830187613062565b81810360408301526142238186612bdb565b905081810360608301526142378185612bdb565b9050818103608083015261424b8184613d44565b9050969550505050505056fea2646970667358221220187b0a7deb46762f02d9b09f404969b5df52d85087ac96c874a2b4b782f421ae64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "_orgArea": {
        "details": "mapping address to policy area to bool"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 144,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 146,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1916,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_orgArea",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 1919,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "OUTROS",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1922,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "EDUCACAO",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1925,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "INFRA",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1928,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "SAUDE",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1936,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "AREAS",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1941,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_budget",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1944,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_ed",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1947,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_infra",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1950,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_health",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1959,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_other",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1967,
        "contract": "contracts/orcamento.sol:OrcamentoUniao2023",
        "label": "_budgetPart",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}